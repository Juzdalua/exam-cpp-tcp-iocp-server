// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum ChatType : int {
  CHAT_TYPE_NONE = 0,
  CHAT_TYPE_NORMAL = 1,
  CHAT_TYPE_PARTY = 2,
  CHAT_TYPE_GUILD = 3,
  CHAT_TYPE_WHISPER = 4,
  CHAT_TYPE_SYSTEM = 5,
  ChatType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChatType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ChatType_IsValid(int value);
constexpr ChatType ChatType_MIN = CHAT_TYPE_NONE;
constexpr ChatType ChatType_MAX = CHAT_TYPE_SYSTEM;
constexpr int ChatType_ARRAYSIZE = ChatType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatType_descriptor();
template<typename T>
inline const std::string& ChatType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChatType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChatType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChatType_descriptor(), enum_t_value);
}
inline bool ChatType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChatType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChatType>(
    ChatType_descriptor(), name, value);
}
enum ToPlayer : int {
  TO_PLAYER_NONE = 0,
  TO_PLAYER_OWNER = 1,
  TO_PLAYER_ALL = 2,
  ToPlayer_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ToPlayer_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ToPlayer_IsValid(int value);
constexpr ToPlayer ToPlayer_MIN = TO_PLAYER_NONE;
constexpr ToPlayer ToPlayer_MAX = TO_PLAYER_ALL;
constexpr int ToPlayer_ARRAYSIZE = ToPlayer_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ToPlayer_descriptor();
template<typename T>
inline const std::string& ToPlayer_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ToPlayer>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ToPlayer_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ToPlayer_descriptor(), enum_t_value);
}
inline bool ToPlayer_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ToPlayer* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ToPlayer>(
    ToPlayer_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::ChatType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ChatType>() {
  return ::Protocol::ChatType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ToPlayer> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ToPlayer>() {
  return ::Protocol::ToPlayer_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
