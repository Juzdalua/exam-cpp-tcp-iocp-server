// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum ChatType : int {
  CHAT_TYPE_NONE = 0,
  CHAT_TYPE_NORMAL = 1,
  CHAT_TYPE_PARTY = 2,
  CHAT_TYPE_GUILD = 3,
  CHAT_TYPE_WHISPER = 4,
  CHAT_TYPE_SYSTEM = 5,
  ChatType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChatType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ChatType_IsValid(int value);
constexpr ChatType ChatType_MIN = CHAT_TYPE_NONE;
constexpr ChatType ChatType_MAX = CHAT_TYPE_SYSTEM;
constexpr int ChatType_ARRAYSIZE = ChatType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatType_descriptor();
template<typename T>
inline const std::string& ChatType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChatType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChatType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChatType_descriptor(), enum_t_value);
}
inline bool ChatType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChatType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChatType>(
    ChatType_descriptor(), name, value);
}
enum ToPlayer : int {
  TO_PLAYER_NONE = 0,
  TO_PLAYER_OWNER = 1,
  TO_PLAYER_ALL = 2,
  ToPlayer_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ToPlayer_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ToPlayer_IsValid(int value);
constexpr ToPlayer ToPlayer_MIN = TO_PLAYER_NONE;
constexpr ToPlayer ToPlayer_MAX = TO_PLAYER_ALL;
constexpr int ToPlayer_ARRAYSIZE = ToPlayer_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ToPlayer_descriptor();
template<typename T>
inline const std::string& ToPlayer_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ToPlayer>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ToPlayer_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ToPlayer_descriptor(), enum_t_value);
}
inline bool ToPlayer_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ToPlayer* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ToPlayer>(
    ToPlayer_descriptor(), name, value);
}
enum MoveDir : int {
  UP = 0,
  DOWN = 1,
  LEFT = 2,
  RIGHT = 3,
  MoveDir_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MoveDir_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MoveDir_IsValid(int value);
constexpr MoveDir MoveDir_MIN = UP;
constexpr MoveDir MoveDir_MAX = RIGHT;
constexpr int MoveDir_ARRAYSIZE = MoveDir_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveDir_descriptor();
template<typename T>
inline const std::string& MoveDir_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MoveDir>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MoveDir_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MoveDir_descriptor(), enum_t_value);
}
inline bool MoveDir_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MoveDir* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MoveDir>(
    MoveDir_descriptor(), name, value);
}
enum PlayerState : int {
  PLAYER_STATE_NONE = 0,
  PLAYER_STATE_LIVE = 1,
  PLAYER_STATE_DEAD = 2,
  PlayerState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PlayerState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PlayerState_IsValid(int value);
constexpr PlayerState PlayerState_MIN = PLAYER_STATE_NONE;
constexpr PlayerState PlayerState_MAX = PLAYER_STATE_DEAD;
constexpr int PlayerState_ARRAYSIZE = PlayerState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerState_descriptor();
template<typename T>
inline const std::string& PlayerState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerState_descriptor(), enum_t_value);
}
inline bool PlayerState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerState>(
    PlayerState_descriptor(), name, value);
}
enum ItemType : int {
  ITEM_TYPE_NONE = 0,
  ITEM_TYPE_HEAL = 1,
  ItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ItemType_IsValid(int value);
constexpr ItemType ItemType_MIN = ITEM_TYPE_NONE;
constexpr ItemType ItemType_MAX = ITEM_TYPE_HEAL;
constexpr int ItemType_ARRAYSIZE = ItemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor();
template<typename T>
inline const std::string& ItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemType_descriptor(), enum_t_value);
}
inline bool ItemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ItemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemType>(
    ItemType_descriptor(), name, value);
}
enum ItemEffect : int {
  ITEM_EFFECT_NONE = 0,
  ITEM_EFFECT_HP = 1,
  ITEM_EFFECT_MP = 2,
  ITEM_EFFECT_ATK = 3,
  ITEM_EFFECT_DEF = 4,
  ItemEffect_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ItemEffect_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ItemEffect_IsValid(int value);
constexpr ItemEffect ItemEffect_MIN = ITEM_EFFECT_NONE;
constexpr ItemEffect ItemEffect_MAX = ITEM_EFFECT_DEF;
constexpr int ItemEffect_ARRAYSIZE = ItemEffect_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemEffect_descriptor();
template<typename T>
inline const std::string& ItemEffect_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemEffect>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemEffect_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemEffect_descriptor(), enum_t_value);
}
inline bool ItemEffect_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ItemEffect* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemEffect>(
    ItemEffect_descriptor(), name, value);
}
enum RoomItemState : int {
  ROOM_ITEM_STATE_NONE = 0,
  ROOM_ITEM_STATE_AVAILABLE = 1,
  ROOM_ITEM_STATE_RESPAWN_PENDING = 2,
  RoomItemState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RoomItemState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RoomItemState_IsValid(int value);
constexpr RoomItemState RoomItemState_MIN = ROOM_ITEM_STATE_NONE;
constexpr RoomItemState RoomItemState_MAX = ROOM_ITEM_STATE_RESPAWN_PENDING;
constexpr int RoomItemState_ARRAYSIZE = RoomItemState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomItemState_descriptor();
template<typename T>
inline const std::string& RoomItemState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoomItemState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoomItemState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoomItemState_descriptor(), enum_t_value);
}
inline bool RoomItemState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoomItemState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoomItemState>(
    RoomItemState_descriptor(), name, value);
}
enum PartyStatus : int {
  PARTY_STATUS_NONE = 0,
  PARTY_STATUS_AVAILABLE = 1,
  PARTY_STATUS_UNAVAILABLE = 2,
  PartyStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PartyStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PartyStatus_IsValid(int value);
constexpr PartyStatus PartyStatus_MIN = PARTY_STATUS_NONE;
constexpr PartyStatus PartyStatus_MAX = PARTY_STATUS_UNAVAILABLE;
constexpr int PartyStatus_ARRAYSIZE = PartyStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PartyStatus_descriptor();
template<typename T>
inline const std::string& PartyStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PartyStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PartyStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PartyStatus_descriptor(), enum_t_value);
}
inline bool PartyStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PartyStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PartyStatus>(
    PartyStatus_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::ChatType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ChatType>() {
  return ::Protocol::ChatType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ToPlayer> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ToPlayer>() {
  return ::Protocol::ToPlayer_descriptor();
}
template <> struct is_proto_enum< ::Protocol::MoveDir> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::MoveDir>() {
  return ::Protocol::MoveDir_descriptor();
}
template <> struct is_proto_enum< ::Protocol::PlayerState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::PlayerState>() {
  return ::Protocol::PlayerState_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ItemType>() {
  return ::Protocol::ItemType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ItemEffect> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ItemEffect>() {
  return ::Protocol::ItemEffect_descriptor();
}
template <> struct is_proto_enum< ::Protocol::RoomItemState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::RoomItemState>() {
  return ::Protocol::RoomItemState_descriptor();
}
template <> struct is_proto_enum< ::Protocol::PartyStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::PartyStatus>() {
  return ::Protocol::PartyStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
