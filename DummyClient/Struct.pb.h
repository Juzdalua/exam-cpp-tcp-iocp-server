// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class Account;
struct AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class ErrorObj;
struct ErrorObjDefaultTypeInternal;
extern ErrorObjDefaultTypeInternal _ErrorObj_default_instance_;
class Item;
struct ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class Party;
struct PartyDefaultTypeInternal;
extern PartyDefaultTypeInternal _Party_default_instance_;
class PartyPlayer;
struct PartyPlayerDefaultTypeInternal;
extern PartyPlayerDefaultTypeInternal _PartyPlayer_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class RoomItem;
struct RoomItemDefaultTypeInternal;
extern RoomItemDefaultTypeInternal _RoomItem_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::Account* Arena::CreateMaybeMessage<::Protocol::Account>(Arena*);
template<> ::Protocol::ErrorObj* Arena::CreateMaybeMessage<::Protocol::ErrorObj>(Arena*);
template<> ::Protocol::Item* Arena::CreateMaybeMessage<::Protocol::Item>(Arena*);
template<> ::Protocol::Party* Arena::CreateMaybeMessage<::Protocol::Party>(Arena*);
template<> ::Protocol::PartyPlayer* Arena::CreateMaybeMessage<::Protocol::PartyPlayer>(Arena*);
template<> ::Protocol::Player* Arena::CreateMaybeMessage<::Protocol::Player>(Arena*);
template<> ::Protocol::RoomItem* Arena::CreateMaybeMessage<::Protocol::RoomItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class ErrorObj final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ErrorObj) */ {
 public:
  inline ErrorObj() : ErrorObj(nullptr) {}
  ~ErrorObj() override;
  explicit PROTOBUF_CONSTEXPR ErrorObj(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorObj(const ErrorObj& from);
  ErrorObj(ErrorObj&& from) noexcept
    : ErrorObj() {
    *this = ::std::move(from);
  }

  inline ErrorObj& operator=(const ErrorObj& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorObj& operator=(ErrorObj&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorObj& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorObj* internal_default_instance() {
    return reinterpret_cast<const ErrorObj*>(
               &_ErrorObj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ErrorObj& a, ErrorObj& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorObj* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorObj* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrorObj* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ErrorObj>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ErrorObj& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ErrorObj& from) {
    ErrorObj::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorObj* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ErrorObj";
  }
  protected:
  explicit ErrorObj(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // string errorMsg = 2;
  void clear_errormsg();
  const std::string& errormsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormsg();
  PROTOBUF_NODISCARD std::string* release_errormsg();
  void set_allocated_errormsg(std::string* errormsg);
  private:
  const std::string& _internal_errormsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormsg(const std::string& value);
  std::string* _internal_mutable_errormsg();
  public:

  // int64 errorCode = 1;
  void clear_errorcode();
  int64_t errorcode() const;
  void set_errorcode(int64_t value);
  private:
  int64_t _internal_errorcode() const;
  void _internal_set_errorcode(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ErrorObj)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormsg_;
    int64_t errorcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Account final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  ~Account() override;
  explicit PROTOBUF_CONSTEXPR Account(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Account& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Account& from) {
    Account::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit PROTOBUF_CONSTEXPR Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Player& from) {
    Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kPosXFieldNumber = 4,
    kPosYFieldNumber = 5,
    kMaxHPFieldNumber = 6,
    kCurrentHPFieldNumber = 7,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 accountId = 2;
  void clear_accountid();
  uint64_t accountid() const;
  void set_accountid(uint64_t value);
  private:
  uint64_t _internal_accountid() const;
  void _internal_set_accountid(uint64_t value);
  public:

  // float posX = 4;
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // float posY = 5;
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // uint64 maxHP = 6;
  void clear_maxhp();
  uint64_t maxhp() const;
  void set_maxhp(uint64_t value);
  private:
  uint64_t _internal_maxhp() const;
  void _internal_set_maxhp(uint64_t value);
  public:

  // uint64 currentHP = 7;
  void clear_currenthp();
  uint64_t currenthp() const;
  void set_currenthp(uint64_t value);
  private:
  uint64_t _internal_currenthp() const;
  void _internal_set_currenthp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t id_;
    uint64_t accountid_;
    float posx_;
    float posy_;
    uint64_t maxhp_;
    uint64_t currenthp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Item) */ {
 public:
  inline Item() : Item(nullptr) {}
  ~Item() override;
  explicit PROTOBUF_CONSTEXPR Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Item& from) {
    Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Item";
  }
  protected:
  explicit Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kEffectFieldNumber = 3,
    kValueFieldNumber = 4,
    kAmountFieldNumber = 5,
  };
  // uint64 itemId = 1;
  void clear_itemid();
  uint64_t itemid() const;
  void set_itemid(uint64_t value);
  private:
  uint64_t _internal_itemid() const;
  void _internal_set_itemid(uint64_t value);
  public:

  // .Protocol.ItemType type = 2;
  void clear_type();
  ::Protocol::ItemType type() const;
  void set_type(::Protocol::ItemType value);
  private:
  ::Protocol::ItemType _internal_type() const;
  void _internal_set_type(::Protocol::ItemType value);
  public:

  // .Protocol.ItemEffect effect = 3;
  void clear_effect();
  ::Protocol::ItemEffect effect() const;
  void set_effect(::Protocol::ItemEffect value);
  private:
  ::Protocol::ItemEffect _internal_effect() const;
  void _internal_set_effect(::Protocol::ItemEffect value);
  public:

  // uint64 value = 4;
  void clear_value();
  uint64_t value() const;
  void set_value(uint64_t value);
  private:
  uint64_t _internal_value() const;
  void _internal_set_value(uint64_t value);
  public:

  // uint64 amount = 5;
  void clear_amount();
  uint64_t amount() const;
  void set_amount(uint64_t value);
  private:
  uint64_t _internal_amount() const;
  void _internal_set_amount(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t itemid_;
    int type_;
    int effect_;
    uint64_t value_;
    uint64_t amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class RoomItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.RoomItem) */ {
 public:
  inline RoomItem() : RoomItem(nullptr) {}
  ~RoomItem() override;
  explicit PROTOBUF_CONSTEXPR RoomItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomItem(const RoomItem& from);
  RoomItem(RoomItem&& from) noexcept
    : RoomItem() {
    *this = ::std::move(from);
  }

  inline RoomItem& operator=(const RoomItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomItem& operator=(RoomItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomItem* internal_default_instance() {
    return reinterpret_cast<const RoomItem*>(
               &_RoomItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RoomItem& a, RoomItem& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomItem& from) {
    RoomItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.RoomItem";
  }
  protected:
  explicit RoomItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 3,
    kRoomIdFieldNumber = 1,
    kRoomItemIdFieldNumber = 2,
    kPosXFieldNumber = 4,
    kPosYFieldNumber = 5,
    kStateFieldNumber = 6,
  };
  // .Protocol.Item item = 3;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::Protocol::Item& item() const;
  PROTOBUF_NODISCARD ::Protocol::Item* release_item();
  ::Protocol::Item* mutable_item();
  void set_allocated_item(::Protocol::Item* item);
  private:
  const ::Protocol::Item& _internal_item() const;
  ::Protocol::Item* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::Protocol::Item* item);
  ::Protocol::Item* unsafe_arena_release_item();

  // uint64 roomId = 1;
  void clear_roomid();
  uint64_t roomid() const;
  void set_roomid(uint64_t value);
  private:
  uint64_t _internal_roomid() const;
  void _internal_set_roomid(uint64_t value);
  public:

  // uint64 roomItemId = 2;
  void clear_roomitemid();
  uint64_t roomitemid() const;
  void set_roomitemid(uint64_t value);
  private:
  uint64_t _internal_roomitemid() const;
  void _internal_set_roomitemid(uint64_t value);
  public:

  // float posX = 4;
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // float posY = 5;
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // .Protocol.RoomItemState state = 6;
  void clear_state();
  ::Protocol::RoomItemState state() const;
  void set_state(::Protocol::RoomItemState value);
  private:
  ::Protocol::RoomItemState _internal_state() const;
  void _internal_set_state(::Protocol::RoomItemState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.RoomItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Item* item_;
    uint64_t roomid_;
    uint64_t roomitemid_;
    float posx_;
    float posy_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PartyPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PartyPlayer) */ {
 public:
  inline PartyPlayer() : PartyPlayer(nullptr) {}
  ~PartyPlayer() override;
  explicit PROTOBUF_CONSTEXPR PartyPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartyPlayer(const PartyPlayer& from);
  PartyPlayer(PartyPlayer&& from) noexcept
    : PartyPlayer() {
    *this = ::std::move(from);
  }

  inline PartyPlayer& operator=(const PartyPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyPlayer& operator=(PartyPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartyPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartyPlayer* internal_default_instance() {
    return reinterpret_cast<const PartyPlayer*>(
               &_PartyPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PartyPlayer& a, PartyPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PartyPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PartyPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PartyPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PartyPlayer& from) {
    PartyPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PartyPlayer";
  }
  protected:
  explicit PartyPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PartyPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Party final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Party) */ {
 public:
  inline Party() : Party(nullptr) {}
  ~Party() override;
  explicit PROTOBUF_CONSTEXPR Party(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Party(const Party& from);
  Party(Party&& from) noexcept
    : Party() {
    *this = ::std::move(from);
  }

  inline Party& operator=(const Party& from) {
    CopyFrom(from);
    return *this;
  }
  inline Party& operator=(Party&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Party& default_instance() {
    return *internal_default_instance();
  }
  static inline const Party* internal_default_instance() {
    return reinterpret_cast<const Party*>(
               &_Party_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Party& a, Party& b) {
    a.Swap(&b);
  }
  inline void Swap(Party* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Party* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Party* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Party>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Party& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Party& from) {
    Party::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Party* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Party";
  }
  protected:
  explicit Party(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyPlayersFieldNumber = 3,
    kPartyIdFieldNumber = 1,
    kPartyStatusFieldNumber = 2,
  };
  // repeated .Protocol.PartyPlayer partyPlayers = 3;
  int partyplayers_size() const;
  private:
  int _internal_partyplayers_size() const;
  public:
  void clear_partyplayers();
  ::Protocol::PartyPlayer* mutable_partyplayers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PartyPlayer >*
      mutable_partyplayers();
  private:
  const ::Protocol::PartyPlayer& _internal_partyplayers(int index) const;
  ::Protocol::PartyPlayer* _internal_add_partyplayers();
  public:
  const ::Protocol::PartyPlayer& partyplayers(int index) const;
  ::Protocol::PartyPlayer* add_partyplayers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PartyPlayer >&
      partyplayers() const;

  // uint64 partyId = 1;
  void clear_partyid();
  uint64_t partyid() const;
  void set_partyid(uint64_t value);
  private:
  uint64_t _internal_partyid() const;
  void _internal_set_partyid(uint64_t value);
  public:

  // .Protocol.PartyStatus partyStatus = 2;
  void clear_partystatus();
  ::Protocol::PartyStatus partystatus() const;
  void set_partystatus(::Protocol::PartyStatus value);
  private:
  ::Protocol::PartyStatus _internal_partystatus() const;
  void _internal_set_partystatus(::Protocol::PartyStatus value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Party)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PartyPlayer > partyplayers_;
    uint64_t partyid_;
    int partystatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ErrorObj

// int64 errorCode = 1;
inline void ErrorObj::clear_errorcode() {
  _impl_.errorcode_ = int64_t{0};
}
inline int64_t ErrorObj::_internal_errorcode() const {
  return _impl_.errorcode_;
}
inline int64_t ErrorObj::errorcode() const {
  // @@protoc_insertion_point(field_get:Protocol.ErrorObj.errorCode)
  return _internal_errorcode();
}
inline void ErrorObj::_internal_set_errorcode(int64_t value) {
  
  _impl_.errorcode_ = value;
}
inline void ErrorObj::set_errorcode(int64_t value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:Protocol.ErrorObj.errorCode)
}

// string errorMsg = 2;
inline void ErrorObj::clear_errormsg() {
  _impl_.errormsg_.ClearToEmpty();
}
inline const std::string& ErrorObj::errormsg() const {
  // @@protoc_insertion_point(field_get:Protocol.ErrorObj.errorMsg)
  return _internal_errormsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ErrorObj::set_errormsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errormsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ErrorObj.errorMsg)
}
inline std::string* ErrorObj::mutable_errormsg() {
  std::string* _s = _internal_mutable_errormsg();
  // @@protoc_insertion_point(field_mutable:Protocol.ErrorObj.errorMsg)
  return _s;
}
inline const std::string& ErrorObj::_internal_errormsg() const {
  return _impl_.errormsg_.Get();
}
inline void ErrorObj::_internal_set_errormsg(const std::string& value) {
  
  _impl_.errormsg_.Set(value, GetArenaForAllocation());
}
inline std::string* ErrorObj::_internal_mutable_errormsg() {
  
  return _impl_.errormsg_.Mutable(GetArenaForAllocation());
}
inline std::string* ErrorObj::release_errormsg() {
  // @@protoc_insertion_point(field_release:Protocol.ErrorObj.errorMsg)
  return _impl_.errormsg_.Release();
}
inline void ErrorObj::set_allocated_errormsg(std::string* errormsg) {
  if (errormsg != nullptr) {
    
  } else {
    
  }
  _impl_.errormsg_.SetAllocated(errormsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormsg_.IsDefault()) {
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.ErrorObj.errorMsg)
}

// -------------------------------------------------------------------

// Account

// uint64 id = 1;
inline void Account::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t Account::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Account::id() const {
  // @@protoc_insertion_point(field_get:Protocol.Account.id)
  return _internal_id();
}
inline void Account::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void Account::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.Account.id)
}

// string name = 2;
inline void Account::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Account::name() const {
  // @@protoc_insertion_point(field_get:Protocol.Account.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.Account.name)
}
inline std::string* Account::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.Account.name)
  return _s;
}
inline const std::string& Account::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Account::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Account::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.Account.name)
  return _impl_.name_.Release();
}
inline void Account::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.Account.name)
}

// string password = 3;
inline void Account::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& Account::password() const {
  // @@protoc_insertion_point(field_get:Protocol.Account.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.Account.password)
}
inline std::string* Account::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.Account.password)
  return _s;
}
inline const std::string& Account::_internal_password() const {
  return _impl_.password_.Get();
}
inline void Account::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* Account::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.Account.password)
  return _impl_.password_.Release();
}
inline void Account::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.Account.password)
}

// -------------------------------------------------------------------

// Player

// uint64 id = 1;
inline void Player::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t Player::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Player::id() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.id)
  return _internal_id();
}
inline void Player::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void Player::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.id)
}

// uint64 accountId = 2;
inline void Player::clear_accountid() {
  _impl_.accountid_ = uint64_t{0u};
}
inline uint64_t Player::_internal_accountid() const {
  return _impl_.accountid_;
}
inline uint64_t Player::accountid() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.accountId)
  return _internal_accountid();
}
inline void Player::_internal_set_accountid(uint64_t value) {
  
  _impl_.accountid_ = value;
}
inline void Player::set_accountid(uint64_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.accountId)
}

// string name = 3;
inline void Player::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.Player.name)
}
inline std::string* Player::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.Player.name)
  return _s;
}
inline const std::string& Player::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Player::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.Player.name)
  return _impl_.name_.Release();
}
inline void Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.Player.name)
}

// float posX = 4;
inline void Player::clear_posx() {
  _impl_.posx_ = 0;
}
inline float Player::_internal_posx() const {
  return _impl_.posx_;
}
inline float Player::posx() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.posX)
  return _internal_posx();
}
inline void Player::_internal_set_posx(float value) {
  
  _impl_.posx_ = value;
}
inline void Player::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.posX)
}

// float posY = 5;
inline void Player::clear_posy() {
  _impl_.posy_ = 0;
}
inline float Player::_internal_posy() const {
  return _impl_.posy_;
}
inline float Player::posy() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.posY)
  return _internal_posy();
}
inline void Player::_internal_set_posy(float value) {
  
  _impl_.posy_ = value;
}
inline void Player::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.posY)
}

// uint64 maxHP = 6;
inline void Player::clear_maxhp() {
  _impl_.maxhp_ = uint64_t{0u};
}
inline uint64_t Player::_internal_maxhp() const {
  return _impl_.maxhp_;
}
inline uint64_t Player::maxhp() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.maxHP)
  return _internal_maxhp();
}
inline void Player::_internal_set_maxhp(uint64_t value) {
  
  _impl_.maxhp_ = value;
}
inline void Player::set_maxhp(uint64_t value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.maxHP)
}

// uint64 currentHP = 7;
inline void Player::clear_currenthp() {
  _impl_.currenthp_ = uint64_t{0u};
}
inline uint64_t Player::_internal_currenthp() const {
  return _impl_.currenthp_;
}
inline uint64_t Player::currenthp() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.currentHP)
  return _internal_currenthp();
}
inline void Player::_internal_set_currenthp(uint64_t value) {
  
  _impl_.currenthp_ = value;
}
inline void Player::set_currenthp(uint64_t value) {
  _internal_set_currenthp(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.currentHP)
}

// -------------------------------------------------------------------

// Item

// uint64 itemId = 1;
inline void Item::clear_itemid() {
  _impl_.itemid_ = uint64_t{0u};
}
inline uint64_t Item::_internal_itemid() const {
  return _impl_.itemid_;
}
inline uint64_t Item::itemid() const {
  // @@protoc_insertion_point(field_get:Protocol.Item.itemId)
  return _internal_itemid();
}
inline void Item::_internal_set_itemid(uint64_t value) {
  
  _impl_.itemid_ = value;
}
inline void Item::set_itemid(uint64_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:Protocol.Item.itemId)
}

// .Protocol.ItemType type = 2;
inline void Item::clear_type() {
  _impl_.type_ = 0;
}
inline ::Protocol::ItemType Item::_internal_type() const {
  return static_cast< ::Protocol::ItemType >(_impl_.type_);
}
inline ::Protocol::ItemType Item::type() const {
  // @@protoc_insertion_point(field_get:Protocol.Item.type)
  return _internal_type();
}
inline void Item::_internal_set_type(::Protocol::ItemType value) {
  
  _impl_.type_ = value;
}
inline void Item::set_type(::Protocol::ItemType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.Item.type)
}

// .Protocol.ItemEffect effect = 3;
inline void Item::clear_effect() {
  _impl_.effect_ = 0;
}
inline ::Protocol::ItemEffect Item::_internal_effect() const {
  return static_cast< ::Protocol::ItemEffect >(_impl_.effect_);
}
inline ::Protocol::ItemEffect Item::effect() const {
  // @@protoc_insertion_point(field_get:Protocol.Item.effect)
  return _internal_effect();
}
inline void Item::_internal_set_effect(::Protocol::ItemEffect value) {
  
  _impl_.effect_ = value;
}
inline void Item::set_effect(::Protocol::ItemEffect value) {
  _internal_set_effect(value);
  // @@protoc_insertion_point(field_set:Protocol.Item.effect)
}

// uint64 value = 4;
inline void Item::clear_value() {
  _impl_.value_ = uint64_t{0u};
}
inline uint64_t Item::_internal_value() const {
  return _impl_.value_;
}
inline uint64_t Item::value() const {
  // @@protoc_insertion_point(field_get:Protocol.Item.value)
  return _internal_value();
}
inline void Item::_internal_set_value(uint64_t value) {
  
  _impl_.value_ = value;
}
inline void Item::set_value(uint64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Protocol.Item.value)
}

// uint64 amount = 5;
inline void Item::clear_amount() {
  _impl_.amount_ = uint64_t{0u};
}
inline uint64_t Item::_internal_amount() const {
  return _impl_.amount_;
}
inline uint64_t Item::amount() const {
  // @@protoc_insertion_point(field_get:Protocol.Item.amount)
  return _internal_amount();
}
inline void Item::_internal_set_amount(uint64_t value) {
  
  _impl_.amount_ = value;
}
inline void Item::set_amount(uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:Protocol.Item.amount)
}

// -------------------------------------------------------------------

// RoomItem

// uint64 roomId = 1;
inline void RoomItem::clear_roomid() {
  _impl_.roomid_ = uint64_t{0u};
}
inline uint64_t RoomItem::_internal_roomid() const {
  return _impl_.roomid_;
}
inline uint64_t RoomItem::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomItem.roomId)
  return _internal_roomid();
}
inline void RoomItem::_internal_set_roomid(uint64_t value) {
  
  _impl_.roomid_ = value;
}
inline void RoomItem::set_roomid(uint64_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.RoomItem.roomId)
}

// uint64 roomItemId = 2;
inline void RoomItem::clear_roomitemid() {
  _impl_.roomitemid_ = uint64_t{0u};
}
inline uint64_t RoomItem::_internal_roomitemid() const {
  return _impl_.roomitemid_;
}
inline uint64_t RoomItem::roomitemid() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomItem.roomItemId)
  return _internal_roomitemid();
}
inline void RoomItem::_internal_set_roomitemid(uint64_t value) {
  
  _impl_.roomitemid_ = value;
}
inline void RoomItem::set_roomitemid(uint64_t value) {
  _internal_set_roomitemid(value);
  // @@protoc_insertion_point(field_set:Protocol.RoomItem.roomItemId)
}

// .Protocol.Item item = 3;
inline bool RoomItem::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool RoomItem::has_item() const {
  return _internal_has_item();
}
inline void RoomItem::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
inline const ::Protocol::Item& RoomItem::_internal_item() const {
  const ::Protocol::Item* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Item&>(
      ::Protocol::_Item_default_instance_);
}
inline const ::Protocol::Item& RoomItem::item() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomItem.item)
  return _internal_item();
}
inline void RoomItem::unsafe_arena_set_allocated_item(
    ::Protocol::Item* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.RoomItem.item)
}
inline ::Protocol::Item* RoomItem::release_item() {
  
  ::Protocol::Item* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Item* RoomItem::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:Protocol.RoomItem.item)
  
  ::Protocol::Item* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::Protocol::Item* RoomItem::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Item>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::Protocol::Item* RoomItem::mutable_item() {
  ::Protocol::Item* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:Protocol.RoomItem.item)
  return _msg;
}
inline void RoomItem::set_allocated_item(::Protocol::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.RoomItem.item)
}

// float posX = 4;
inline void RoomItem::clear_posx() {
  _impl_.posx_ = 0;
}
inline float RoomItem::_internal_posx() const {
  return _impl_.posx_;
}
inline float RoomItem::posx() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomItem.posX)
  return _internal_posx();
}
inline void RoomItem::_internal_set_posx(float value) {
  
  _impl_.posx_ = value;
}
inline void RoomItem::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Protocol.RoomItem.posX)
}

// float posY = 5;
inline void RoomItem::clear_posy() {
  _impl_.posy_ = 0;
}
inline float RoomItem::_internal_posy() const {
  return _impl_.posy_;
}
inline float RoomItem::posy() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomItem.posY)
  return _internal_posy();
}
inline void RoomItem::_internal_set_posy(float value) {
  
  _impl_.posy_ = value;
}
inline void RoomItem::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Protocol.RoomItem.posY)
}

// .Protocol.RoomItemState state = 6;
inline void RoomItem::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::RoomItemState RoomItem::_internal_state() const {
  return static_cast< ::Protocol::RoomItemState >(_impl_.state_);
}
inline ::Protocol::RoomItemState RoomItem::state() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomItem.state)
  return _internal_state();
}
inline void RoomItem::_internal_set_state(::Protocol::RoomItemState value) {
  
  _impl_.state_ = value;
}
inline void RoomItem::set_state(::Protocol::RoomItemState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.RoomItem.state)
}

// -------------------------------------------------------------------

// PartyPlayer

// uint64 playerId = 1;
inline void PartyPlayer::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t PartyPlayer::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t PartyPlayer::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.PartyPlayer.playerId)
  return _internal_playerid();
}
inline void PartyPlayer::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void PartyPlayer::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.PartyPlayer.playerId)
}

// -------------------------------------------------------------------

// Party

// uint64 partyId = 1;
inline void Party::clear_partyid() {
  _impl_.partyid_ = uint64_t{0u};
}
inline uint64_t Party::_internal_partyid() const {
  return _impl_.partyid_;
}
inline uint64_t Party::partyid() const {
  // @@protoc_insertion_point(field_get:Protocol.Party.partyId)
  return _internal_partyid();
}
inline void Party::_internal_set_partyid(uint64_t value) {
  
  _impl_.partyid_ = value;
}
inline void Party::set_partyid(uint64_t value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:Protocol.Party.partyId)
}

// .Protocol.PartyStatus partyStatus = 2;
inline void Party::clear_partystatus() {
  _impl_.partystatus_ = 0;
}
inline ::Protocol::PartyStatus Party::_internal_partystatus() const {
  return static_cast< ::Protocol::PartyStatus >(_impl_.partystatus_);
}
inline ::Protocol::PartyStatus Party::partystatus() const {
  // @@protoc_insertion_point(field_get:Protocol.Party.partyStatus)
  return _internal_partystatus();
}
inline void Party::_internal_set_partystatus(::Protocol::PartyStatus value) {
  
  _impl_.partystatus_ = value;
}
inline void Party::set_partystatus(::Protocol::PartyStatus value) {
  _internal_set_partystatus(value);
  // @@protoc_insertion_point(field_set:Protocol.Party.partyStatus)
}

// repeated .Protocol.PartyPlayer partyPlayers = 3;
inline int Party::_internal_partyplayers_size() const {
  return _impl_.partyplayers_.size();
}
inline int Party::partyplayers_size() const {
  return _internal_partyplayers_size();
}
inline void Party::clear_partyplayers() {
  _impl_.partyplayers_.Clear();
}
inline ::Protocol::PartyPlayer* Party::mutable_partyplayers(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.Party.partyPlayers)
  return _impl_.partyplayers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PartyPlayer >*
Party::mutable_partyplayers() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Party.partyPlayers)
  return &_impl_.partyplayers_;
}
inline const ::Protocol::PartyPlayer& Party::_internal_partyplayers(int index) const {
  return _impl_.partyplayers_.Get(index);
}
inline const ::Protocol::PartyPlayer& Party::partyplayers(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Party.partyPlayers)
  return _internal_partyplayers(index);
}
inline ::Protocol::PartyPlayer* Party::_internal_add_partyplayers() {
  return _impl_.partyplayers_.Add();
}
inline ::Protocol::PartyPlayer* Party::add_partyplayers() {
  ::Protocol::PartyPlayer* _add = _internal_add_partyplayers();
  // @@protoc_insertion_point(field_add:Protocol.Party.partyPlayers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PartyPlayer >&
Party::partyplayers() const {
  // @@protoc_insertion_point(field_list:Protocol.Party.partyPlayers)
  return _impl_.partyplayers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
