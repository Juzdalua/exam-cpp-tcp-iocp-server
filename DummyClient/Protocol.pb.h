// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_ALL_PARTY;
struct C_ALL_PARTYDefaultTypeInternal;
extern C_ALL_PARTYDefaultTypeInternal _C_ALL_PARTY_default_instance_;
class C_CHAT;
struct C_CHATDefaultTypeInternal;
extern C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
class C_CHECK_ROOM;
struct C_CHECK_ROOMDefaultTypeInternal;
extern C_CHECK_ROOMDefaultTypeInternal _C_CHECK_ROOM_default_instance_;
class C_CREATE_PARTY;
struct C_CREATE_PARTYDefaultTypeInternal;
extern C_CREATE_PARTYDefaultTypeInternal _C_CREATE_PARTY_default_instance_;
class C_EAT_ROOM_ITEM;
struct C_EAT_ROOM_ITEMDefaultTypeInternal;
extern C_EAT_ROOM_ITEMDefaultTypeInternal _C_EAT_ROOM_ITEM_default_instance_;
class C_ENTER_GAME;
struct C_ENTER_GAMEDefaultTypeInternal;
extern C_ENTER_GAMEDefaultTypeInternal _C_ENTER_GAME_default_instance_;
class C_HIT;
struct C_HITDefaultTypeInternal;
extern C_HITDefaultTypeInternal _C_HIT_default_instance_;
class C_JOIN_PARTY;
struct C_JOIN_PARTYDefaultTypeInternal;
extern C_JOIN_PARTYDefaultTypeInternal _C_JOIN_PARTY_default_instance_;
class C_LOGIN;
struct C_LOGINDefaultTypeInternal;
extern C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
class C_MOVE;
struct C_MOVEDefaultTypeInternal;
extern C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
class C_MY_PARTY;
struct C_MY_PARTYDefaultTypeInternal;
extern C_MY_PARTYDefaultTypeInternal _C_MY_PARTY_default_instance_;
class C_SHOT;
struct C_SHOTDefaultTypeInternal;
extern C_SHOTDefaultTypeInternal _C_SHOT_default_instance_;
class C_SIGNUP;
struct C_SIGNUPDefaultTypeInternal;
extern C_SIGNUPDefaultTypeInternal _C_SIGNUP_default_instance_;
class C_USE_ITEM;
struct C_USE_ITEMDefaultTypeInternal;
extern C_USE_ITEMDefaultTypeInternal _C_USE_ITEM_default_instance_;
class C_WITHDRAW_PARTY;
struct C_WITHDRAW_PARTYDefaultTypeInternal;
extern C_WITHDRAW_PARTYDefaultTypeInternal _C_WITHDRAW_PARTY_default_instance_;
class S_ALL_PARTY;
struct S_ALL_PARTYDefaultTypeInternal;
extern S_ALL_PARTYDefaultTypeInternal _S_ALL_PARTY_default_instance_;
class S_CHAT;
struct S_CHATDefaultTypeInternal;
extern S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
class S_CHECK_ROOM;
struct S_CHECK_ROOMDefaultTypeInternal;
extern S_CHECK_ROOMDefaultTypeInternal _S_CHECK_ROOM_default_instance_;
class S_CREATE_PARTY;
struct S_CREATE_PARTYDefaultTypeInternal;
extern S_CREATE_PARTYDefaultTypeInternal _S_CREATE_PARTY_default_instance_;
class S_CREATE_ROOM;
struct S_CREATE_ROOMDefaultTypeInternal;
extern S_CREATE_ROOMDefaultTypeInternal _S_CREATE_ROOM_default_instance_;
class S_DISCONNECT;
struct S_DISCONNECTDefaultTypeInternal;
extern S_DISCONNECTDefaultTypeInternal _S_DISCONNECT_default_instance_;
class S_EAT_ROOM_ITEM;
struct S_EAT_ROOM_ITEMDefaultTypeInternal;
extern S_EAT_ROOM_ITEMDefaultTypeInternal _S_EAT_ROOM_ITEM_default_instance_;
class S_ENTER_GAME;
struct S_ENTER_GAMEDefaultTypeInternal;
extern S_ENTER_GAMEDefaultTypeInternal _S_ENTER_GAME_default_instance_;
class S_HIT;
struct S_HITDefaultTypeInternal;
extern S_HITDefaultTypeInternal _S_HIT_default_instance_;
class S_INVALID_ID;
struct S_INVALID_IDDefaultTypeInternal;
extern S_INVALID_IDDefaultTypeInternal _S_INVALID_ID_default_instance_;
class S_JOIN_PARTY;
struct S_JOIN_PARTYDefaultTypeInternal;
extern S_JOIN_PARTYDefaultTypeInternal _S_JOIN_PARTY_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_MOVE;
struct S_MOVEDefaultTypeInternal;
extern S_MOVEDefaultTypeInternal _S_MOVE_default_instance_;
class S_MY_PARTY;
struct S_MY_PARTYDefaultTypeInternal;
extern S_MY_PARTYDefaultTypeInternal _S_MY_PARTY_default_instance_;
class S_SERVER_CHAT;
struct S_SERVER_CHATDefaultTypeInternal;
extern S_SERVER_CHATDefaultTypeInternal _S_SERVER_CHAT_default_instance_;
class S_SHOT;
struct S_SHOTDefaultTypeInternal;
extern S_SHOTDefaultTypeInternal _S_SHOT_default_instance_;
class S_SIGNUP;
struct S_SIGNUPDefaultTypeInternal;
extern S_SIGNUPDefaultTypeInternal _S_SIGNUP_default_instance_;
class S_USE_ITEM;
struct S_USE_ITEMDefaultTypeInternal;
extern S_USE_ITEMDefaultTypeInternal _S_USE_ITEM_default_instance_;
class S_WITHDRAW_PARTY;
struct S_WITHDRAW_PARTYDefaultTypeInternal;
extern S_WITHDRAW_PARTYDefaultTypeInternal _S_WITHDRAW_PARTY_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_ALL_PARTY* Arena::CreateMaybeMessage<::Protocol::C_ALL_PARTY>(Arena*);
template<> ::Protocol::C_CHAT* Arena::CreateMaybeMessage<::Protocol::C_CHAT>(Arena*);
template<> ::Protocol::C_CHECK_ROOM* Arena::CreateMaybeMessage<::Protocol::C_CHECK_ROOM>(Arena*);
template<> ::Protocol::C_CREATE_PARTY* Arena::CreateMaybeMessage<::Protocol::C_CREATE_PARTY>(Arena*);
template<> ::Protocol::C_EAT_ROOM_ITEM* Arena::CreateMaybeMessage<::Protocol::C_EAT_ROOM_ITEM>(Arena*);
template<> ::Protocol::C_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::C_ENTER_GAME>(Arena*);
template<> ::Protocol::C_HIT* Arena::CreateMaybeMessage<::Protocol::C_HIT>(Arena*);
template<> ::Protocol::C_JOIN_PARTY* Arena::CreateMaybeMessage<::Protocol::C_JOIN_PARTY>(Arena*);
template<> ::Protocol::C_LOGIN* Arena::CreateMaybeMessage<::Protocol::C_LOGIN>(Arena*);
template<> ::Protocol::C_MOVE* Arena::CreateMaybeMessage<::Protocol::C_MOVE>(Arena*);
template<> ::Protocol::C_MY_PARTY* Arena::CreateMaybeMessage<::Protocol::C_MY_PARTY>(Arena*);
template<> ::Protocol::C_SHOT* Arena::CreateMaybeMessage<::Protocol::C_SHOT>(Arena*);
template<> ::Protocol::C_SIGNUP* Arena::CreateMaybeMessage<::Protocol::C_SIGNUP>(Arena*);
template<> ::Protocol::C_USE_ITEM* Arena::CreateMaybeMessage<::Protocol::C_USE_ITEM>(Arena*);
template<> ::Protocol::C_WITHDRAW_PARTY* Arena::CreateMaybeMessage<::Protocol::C_WITHDRAW_PARTY>(Arena*);
template<> ::Protocol::S_ALL_PARTY* Arena::CreateMaybeMessage<::Protocol::S_ALL_PARTY>(Arena*);
template<> ::Protocol::S_CHAT* Arena::CreateMaybeMessage<::Protocol::S_CHAT>(Arena*);
template<> ::Protocol::S_CHECK_ROOM* Arena::CreateMaybeMessage<::Protocol::S_CHECK_ROOM>(Arena*);
template<> ::Protocol::S_CREATE_PARTY* Arena::CreateMaybeMessage<::Protocol::S_CREATE_PARTY>(Arena*);
template<> ::Protocol::S_CREATE_ROOM* Arena::CreateMaybeMessage<::Protocol::S_CREATE_ROOM>(Arena*);
template<> ::Protocol::S_DISCONNECT* Arena::CreateMaybeMessage<::Protocol::S_DISCONNECT>(Arena*);
template<> ::Protocol::S_EAT_ROOM_ITEM* Arena::CreateMaybeMessage<::Protocol::S_EAT_ROOM_ITEM>(Arena*);
template<> ::Protocol::S_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::S_ENTER_GAME>(Arena*);
template<> ::Protocol::S_HIT* Arena::CreateMaybeMessage<::Protocol::S_HIT>(Arena*);
template<> ::Protocol::S_INVALID_ID* Arena::CreateMaybeMessage<::Protocol::S_INVALID_ID>(Arena*);
template<> ::Protocol::S_JOIN_PARTY* Arena::CreateMaybeMessage<::Protocol::S_JOIN_PARTY>(Arena*);
template<> ::Protocol::S_LOGIN* Arena::CreateMaybeMessage<::Protocol::S_LOGIN>(Arena*);
template<> ::Protocol::S_MOVE* Arena::CreateMaybeMessage<::Protocol::S_MOVE>(Arena*);
template<> ::Protocol::S_MY_PARTY* Arena::CreateMaybeMessage<::Protocol::S_MY_PARTY>(Arena*);
template<> ::Protocol::S_SERVER_CHAT* Arena::CreateMaybeMessage<::Protocol::S_SERVER_CHAT>(Arena*);
template<> ::Protocol::S_SHOT* Arena::CreateMaybeMessage<::Protocol::S_SHOT>(Arena*);
template<> ::Protocol::S_SIGNUP* Arena::CreateMaybeMessage<::Protocol::S_SIGNUP>(Arena*);
template<> ::Protocol::S_USE_ITEM* Arena::CreateMaybeMessage<::Protocol::S_USE_ITEM>(Arena*);
template<> ::Protocol::S_WITHDRAW_PARTY* Arena::CreateMaybeMessage<::Protocol::S_WITHDRAW_PARTY>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class S_INVALID_ID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_INVALID_ID) */ {
 public:
  inline S_INVALID_ID() : S_INVALID_ID(nullptr) {}
  ~S_INVALID_ID() override;
  explicit PROTOBUF_CONSTEXPR S_INVALID_ID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_INVALID_ID(const S_INVALID_ID& from);
  S_INVALID_ID(S_INVALID_ID&& from) noexcept
    : S_INVALID_ID() {
    *this = ::std::move(from);
  }

  inline S_INVALID_ID& operator=(const S_INVALID_ID& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_INVALID_ID& operator=(S_INVALID_ID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_INVALID_ID& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_INVALID_ID* internal_default_instance() {
    return reinterpret_cast<const S_INVALID_ID*>(
               &_S_INVALID_ID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S_INVALID_ID& a, S_INVALID_ID& b) {
    a.Swap(&b);
  }
  inline void Swap(S_INVALID_ID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_INVALID_ID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_INVALID_ID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_INVALID_ID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_INVALID_ID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_INVALID_ID& from) {
    S_INVALID_ID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_INVALID_ID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_INVALID_ID";
  }
  protected:
  explicit S_INVALID_ID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .Protocol.ErrorObj error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Protocol::ErrorObj& error() const;
  PROTOBUF_NODISCARD ::Protocol::ErrorObj* release_error();
  ::Protocol::ErrorObj* mutable_error();
  void set_allocated_error(::Protocol::ErrorObj* error);
  private:
  const ::Protocol::ErrorObj& _internal_error() const;
  ::Protocol::ErrorObj* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Protocol::ErrorObj* error);
  ::Protocol::ErrorObj* unsafe_arena_release_error();

  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_INVALID_ID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ErrorObj* error_;
    uint64_t playerid_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SERVER_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SERVER_CHAT) */ {
 public:
  inline S_SERVER_CHAT() : S_SERVER_CHAT(nullptr) {}
  ~S_SERVER_CHAT() override;
  explicit PROTOBUF_CONSTEXPR S_SERVER_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SERVER_CHAT(const S_SERVER_CHAT& from);
  S_SERVER_CHAT(S_SERVER_CHAT&& from) noexcept
    : S_SERVER_CHAT() {
    *this = ::std::move(from);
  }

  inline S_SERVER_CHAT& operator=(const S_SERVER_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SERVER_CHAT& operator=(S_SERVER_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SERVER_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SERVER_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_SERVER_CHAT*>(
               &_S_SERVER_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_SERVER_CHAT& a, S_SERVER_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SERVER_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SERVER_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SERVER_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SERVER_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SERVER_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SERVER_CHAT& from) {
    S_SERVER_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SERVER_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SERVER_CHAT";
  }
  protected:
  explicit S_SERVER_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .Protocol.ChatType type = 1;
  void clear_type();
  ::Protocol::ChatType type() const;
  void set_type(::Protocol::ChatType value);
  private:
  ::Protocol::ChatType _internal_type() const;
  void _internal_set_type(::Protocol::ChatType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SERVER_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CHECK_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_CHECK_ROOM) */ {
 public:
  inline C_CHECK_ROOM() : C_CHECK_ROOM(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_CHECK_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHECK_ROOM(const C_CHECK_ROOM& from);
  C_CHECK_ROOM(C_CHECK_ROOM&& from) noexcept
    : C_CHECK_ROOM() {
    *this = ::std::move(from);
  }

  inline C_CHECK_ROOM& operator=(const C_CHECK_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHECK_ROOM& operator=(C_CHECK_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHECK_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHECK_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_CHECK_ROOM*>(
               &_C_CHECK_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_CHECK_ROOM& a, C_CHECK_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHECK_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHECK_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CHECK_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CHECK_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_CHECK_ROOM& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_CHECK_ROOM& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHECK_ROOM";
  }
  protected:
  explicit C_CHECK_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_CHECK_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHECK_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHECK_ROOM) */ {
 public:
  inline S_CHECK_ROOM() : S_CHECK_ROOM(nullptr) {}
  ~S_CHECK_ROOM() override;
  explicit PROTOBUF_CONSTEXPR S_CHECK_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHECK_ROOM(const S_CHECK_ROOM& from);
  S_CHECK_ROOM(S_CHECK_ROOM&& from) noexcept
    : S_CHECK_ROOM() {
    *this = ::std::move(from);
  }

  inline S_CHECK_ROOM& operator=(const S_CHECK_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHECK_ROOM& operator=(S_CHECK_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHECK_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHECK_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_CHECK_ROOM*>(
               &_S_CHECK_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_CHECK_ROOM& a, S_CHECK_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHECK_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHECK_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CHECK_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CHECK_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CHECK_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_CHECK_ROOM& from) {
    S_CHECK_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHECK_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHECK_ROOM";
  }
  protected:
  explicit S_CHECK_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // uint64 count = 1;
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHECK_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CREATE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CREATE_ROOM) */ {
 public:
  inline S_CREATE_ROOM() : S_CREATE_ROOM(nullptr) {}
  ~S_CREATE_ROOM() override;
  explicit PROTOBUF_CONSTEXPR S_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CREATE_ROOM(const S_CREATE_ROOM& from);
  S_CREATE_ROOM(S_CREATE_ROOM&& from) noexcept
    : S_CREATE_ROOM() {
    *this = ::std::move(from);
  }

  inline S_CREATE_ROOM& operator=(const S_CREATE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CREATE_ROOM& operator=(S_CREATE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CREATE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CREATE_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_CREATE_ROOM*>(
               &_S_CREATE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_CREATE_ROOM& a, S_CREATE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CREATE_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CREATE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CREATE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CREATE_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CREATE_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_CREATE_ROOM& from) {
    S_CREATE_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CREATE_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CREATE_ROOM";
  }
  protected:
  explicit S_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // repeated .Protocol.RoomItem item = 1;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::Protocol::RoomItem* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomItem >*
      mutable_item();
  private:
  const ::Protocol::RoomItem& _internal_item(int index) const;
  ::Protocol::RoomItem* _internal_add_item();
  public:
  const ::Protocol::RoomItem& item(int index) const;
  ::Protocol::RoomItem* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomItem >&
      item() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_CREATE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomItem > item_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_DISCONNECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DISCONNECT) */ {
 public:
  inline S_DISCONNECT() : S_DISCONNECT(nullptr) {}
  ~S_DISCONNECT() override;
  explicit PROTOBUF_CONSTEXPR S_DISCONNECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DISCONNECT(const S_DISCONNECT& from);
  S_DISCONNECT(S_DISCONNECT&& from) noexcept
    : S_DISCONNECT() {
    *this = ::std::move(from);
  }

  inline S_DISCONNECT& operator=(const S_DISCONNECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DISCONNECT& operator=(S_DISCONNECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DISCONNECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DISCONNECT* internal_default_instance() {
    return reinterpret_cast<const S_DISCONNECT*>(
               &_S_DISCONNECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_DISCONNECT& a, S_DISCONNECT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DISCONNECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DISCONNECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DISCONNECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DISCONNECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_DISCONNECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_DISCONNECT& from) {
    S_DISCONNECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DISCONNECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DISCONNECT";
  }
  protected:
  explicit S_DISCONNECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_DISCONNECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_SIGNUP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SIGNUP) */ {
 public:
  inline C_SIGNUP() : C_SIGNUP(nullptr) {}
  ~C_SIGNUP() override;
  explicit PROTOBUF_CONSTEXPR C_SIGNUP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SIGNUP(const C_SIGNUP& from);
  C_SIGNUP(C_SIGNUP&& from) noexcept
    : C_SIGNUP() {
    *this = ::std::move(from);
  }

  inline C_SIGNUP& operator=(const C_SIGNUP& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SIGNUP& operator=(C_SIGNUP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SIGNUP& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SIGNUP* internal_default_instance() {
    return reinterpret_cast<const C_SIGNUP*>(
               &_C_SIGNUP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_SIGNUP& a, C_SIGNUP& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SIGNUP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SIGNUP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SIGNUP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SIGNUP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_SIGNUP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_SIGNUP& from) {
    C_SIGNUP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SIGNUP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SIGNUP";
  }
  protected:
  explicit C_SIGNUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // .Protocol.Account account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::Protocol::Account& account() const;
  PROTOBUF_NODISCARD ::Protocol::Account* release_account();
  ::Protocol::Account* mutable_account();
  void set_allocated_account(::Protocol::Account* account);
  private:
  const ::Protocol::Account& _internal_account() const;
  ::Protocol::Account* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::Protocol::Account* account);
  ::Protocol::Account* unsafe_arena_release_account();

  // @@protoc_insertion_point(class_scope:Protocol.C_SIGNUP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Account* account_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SIGNUP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SIGNUP) */ {
 public:
  inline S_SIGNUP() : S_SIGNUP(nullptr) {}
  ~S_SIGNUP() override;
  explicit PROTOBUF_CONSTEXPR S_SIGNUP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SIGNUP(const S_SIGNUP& from);
  S_SIGNUP(S_SIGNUP&& from) noexcept
    : S_SIGNUP() {
    *this = ::std::move(from);
  }

  inline S_SIGNUP& operator=(const S_SIGNUP& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SIGNUP& operator=(S_SIGNUP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SIGNUP& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SIGNUP* internal_default_instance() {
    return reinterpret_cast<const S_SIGNUP*>(
               &_S_SIGNUP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_SIGNUP& a, S_SIGNUP& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SIGNUP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SIGNUP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SIGNUP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SIGNUP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SIGNUP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SIGNUP& from) {
    S_SIGNUP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SIGNUP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SIGNUP";
  }
  protected:
  explicit S_SIGNUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.ErrorObj error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Protocol::ErrorObj& error() const;
  PROTOBUF_NODISCARD ::Protocol::ErrorObj* release_error();
  ::Protocol::ErrorObj* mutable_error();
  void set_allocated_error(::Protocol::ErrorObj* error);
  private:
  const ::Protocol::ErrorObj& _internal_error() const;
  ::Protocol::ErrorObj* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Protocol::ErrorObj* error);
  ::Protocol::ErrorObj* unsafe_arena_release_error();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SIGNUP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ErrorObj* error_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LOGIN) */ {
 public:
  inline C_LOGIN() : C_LOGIN(nullptr) {}
  ~C_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR C_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOGIN(const C_LOGIN& from);
  C_LOGIN(C_LOGIN&& from) noexcept
    : C_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_LOGIN& operator=(const C_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGIN& operator=(C_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_LOGIN*>(
               &_C_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C_LOGIN& a, C_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_LOGIN& from) {
    C_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOGIN";
  }
  protected:
  explicit C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // .Protocol.Account account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::Protocol::Account& account() const;
  PROTOBUF_NODISCARD ::Protocol::Account* release_account();
  ::Protocol::Account* mutable_account();
  void set_allocated_account(::Protocol::Account* account);
  private:
  const ::Protocol::Account& _internal_account() const;
  ::Protocol::Account* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::Protocol::Account* account);
  ::Protocol::Account* unsafe_arena_release_account();

  // @@protoc_insertion_point(class_scope:Protocol.C_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Account* account_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN(const S_LOGIN& from);
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LOGIN& from) {
    S_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kErrorFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.Player player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // .Protocol.ErrorObj error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Protocol::ErrorObj& error() const;
  PROTOBUF_NODISCARD ::Protocol::ErrorObj* release_error();
  ::Protocol::ErrorObj* mutable_error();
  void set_allocated_error(::Protocol::ErrorObj* error);
  private:
  const ::Protocol::ErrorObj& _internal_error() const;
  ::Protocol::ErrorObj* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Protocol::ErrorObj* error);
  ::Protocol::ErrorObj* unsafe_arena_release_error();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    ::Protocol::ErrorObj* error_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ENTER_GAME) */ {
 public:
  inline C_ENTER_GAME() : C_ENTER_GAME(nullptr) {}
  ~C_ENTER_GAME() override;
  explicit PROTOBUF_CONSTEXPR C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ENTER_GAME(const C_ENTER_GAME& from);
  C_ENTER_GAME(C_ENTER_GAME&& from) noexcept
    : C_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline C_ENTER_GAME& operator=(const C_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ENTER_GAME& operator=(C_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const C_ENTER_GAME*>(
               &_C_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C_ENTER_GAME& a, C_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ENTER_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ENTER_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ENTER_GAME& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ENTER_GAME& from) {
    C_ENTER_GAME::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ENTER_GAME* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ENTER_GAME";
  }
  protected:
  explicit C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .Protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:Protocol.C_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ENTER_GAME) */ {
 public:
  inline S_ENTER_GAME() : S_ENTER_GAME(nullptr) {}
  ~S_ENTER_GAME() override;
  explicit PROTOBUF_CONSTEXPR S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ENTER_GAME(const S_ENTER_GAME& from);
  S_ENTER_GAME(S_ENTER_GAME&& from) noexcept
    : S_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline S_ENTER_GAME& operator=(const S_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ENTER_GAME& operator=(S_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const S_ENTER_GAME*>(
               &_S_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_ENTER_GAME& a, S_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ENTER_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ENTER_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ENTER_GAME& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ENTER_GAME& from) {
    S_ENTER_GAME::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ENTER_GAME* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ENTER_GAME";
  }
  protected:
  explicit S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 3,
    kErrorFieldNumber = 4,
    kToPlayerFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // repeated .Protocol.Player players = 3;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Protocol::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >*
      mutable_players();
  private:
  const ::Protocol::Player& _internal_players(int index) const;
  ::Protocol::Player* _internal_add_players();
  public:
  const ::Protocol::Player& players(int index) const;
  ::Protocol::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >&
      players() const;

  // .Protocol.ErrorObj error = 4;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Protocol::ErrorObj& error() const;
  PROTOBUF_NODISCARD ::Protocol::ErrorObj* release_error();
  ::Protocol::ErrorObj* mutable_error();
  void set_allocated_error(::Protocol::ErrorObj* error);
  private:
  const ::Protocol::ErrorObj& _internal_error() const;
  ::Protocol::ErrorObj* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Protocol::ErrorObj* error);
  ::Protocol::ErrorObj* unsafe_arena_release_error();

  // .Protocol.ToPlayer toPlayer = 1;
  void clear_toplayer();
  ::Protocol::ToPlayer toplayer() const;
  void set_toplayer(::Protocol::ToPlayer value);
  private:
  ::Protocol::ToPlayer _internal_toplayer() const;
  void _internal_set_toplayer(::Protocol::ToPlayer value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player > players_;
    ::Protocol::ErrorObj* error_;
    int toplayer_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHAT) */ {
 public:
  inline C_CHAT() : C_CHAT(nullptr) {}
  ~C_CHAT() override;
  explicit PROTOBUF_CONSTEXPR C_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHAT(const C_CHAT& from);
  C_CHAT(C_CHAT&& from) noexcept
    : C_CHAT() {
    *this = ::std::move(from);
  }

  inline C_CHAT& operator=(const C_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHAT& operator=(C_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHAT* internal_default_instance() {
    return reinterpret_cast<const C_CHAT*>(
               &_C_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C_CHAT& a, C_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_CHAT& from) {
    C_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHAT";
  }
  protected:
  explicit C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 3,
    kMsgFieldNumber = 4,
    kPlayerIdFieldNumber = 2,
    kTargetIdFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // string playerName = 3;
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_NODISCARD std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // string msg = 4;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint64 playerId = 2;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // uint64 targetId = 5;
  void clear_targetid();
  uint64_t targetid() const;
  void set_targetid(uint64_t value);
  private:
  uint64_t _internal_targetid() const;
  void _internal_set_targetid(uint64_t value);
  public:

  // .Protocol.ChatType type = 1;
  void clear_type();
  ::Protocol::ChatType type() const;
  void set_type(::Protocol::ChatType value);
  private:
  ::Protocol::ChatType _internal_type() const;
  void _internal_set_type(::Protocol::ChatType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    uint64_t playerid_;
    uint64_t targetid_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHAT) */ {
 public:
  inline S_CHAT() : S_CHAT(nullptr) {}
  ~S_CHAT() override;
  explicit PROTOBUF_CONSTEXPR S_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHAT(const S_CHAT& from);
  S_CHAT(S_CHAT&& from) noexcept
    : S_CHAT() {
    *this = ::std::move(from);
  }

  inline S_CHAT& operator=(const S_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHAT& operator=(S_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_CHAT*>(
               &_S_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_CHAT& a, S_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_CHAT& from) {
    S_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHAT";
  }
  protected:
  explicit S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 3,
    kMsgFieldNumber = 4,
    kErrorFieldNumber = 7,
    kPlayerIdFieldNumber = 2,
    kTypeFieldNumber = 1,
    kSuccessFieldNumber = 6,
    kTargetIdFieldNumber = 5,
  };
  // string playerName = 3;
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_NODISCARD std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // string msg = 4;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .Protocol.ErrorObj error = 7;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Protocol::ErrorObj& error() const;
  PROTOBUF_NODISCARD ::Protocol::ErrorObj* release_error();
  ::Protocol::ErrorObj* mutable_error();
  void set_allocated_error(::Protocol::ErrorObj* error);
  private:
  const ::Protocol::ErrorObj& _internal_error() const;
  ::Protocol::ErrorObj* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Protocol::ErrorObj* error);
  ::Protocol::ErrorObj* unsafe_arena_release_error();

  // uint64 playerId = 2;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // .Protocol.ChatType type = 1;
  void clear_type();
  ::Protocol::ChatType type() const;
  void set_type(::Protocol::ChatType value);
  private:
  ::Protocol::ChatType _internal_type() const;
  void _internal_set_type(::Protocol::ChatType value);
  public:

  // bool success = 6;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint64 targetId = 5;
  void clear_targetid();
  uint64_t targetid() const;
  void set_targetid(uint64_t value);
  private:
  uint64_t _internal_targetid() const;
  void _internal_set_targetid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::Protocol::ErrorObj* error_;
    uint64_t playerid_;
    int type_;
    bool success_;
    uint64_t targetid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MOVE) */ {
 public:
  inline C_MOVE() : C_MOVE(nullptr) {}
  ~C_MOVE() override;
  explicit PROTOBUF_CONSTEXPR C_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MOVE(const C_MOVE& from);
  C_MOVE(C_MOVE&& from) noexcept
    : C_MOVE() {
    *this = ::std::move(from);
  }

  inline C_MOVE& operator=(const C_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MOVE& operator=(C_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MOVE* internal_default_instance() {
    return reinterpret_cast<const C_MOVE*>(
               &_C_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(C_MOVE& a, C_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MOVE& from) {
    C_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MOVE";
  }
  protected:
  explicit C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
    kDirFieldNumber = 4,
  };
  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // float posX = 2;
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // float posY = 3;
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // .Protocol.MoveDir dir = 4;
  void clear_dir();
  ::Protocol::MoveDir dir() const;
  void set_dir(::Protocol::MoveDir value);
  private:
  ::Protocol::MoveDir _internal_dir() const;
  void _internal_set_dir(::Protocol::MoveDir value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t playerid_;
    float posx_;
    float posy_;
    int dir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MOVE) */ {
 public:
  inline S_MOVE() : S_MOVE(nullptr) {}
  ~S_MOVE() override;
  explicit PROTOBUF_CONSTEXPR S_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MOVE(const S_MOVE& from);
  S_MOVE(S_MOVE&& from) noexcept
    : S_MOVE() {
    *this = ::std::move(from);
  }

  inline S_MOVE& operator=(const S_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MOVE& operator=(S_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MOVE* internal_default_instance() {
    return reinterpret_cast<const S_MOVE*>(
               &_S_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S_MOVE& a, S_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MOVE& from) {
    S_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MOVE";
  }
  protected:
  explicit S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kErrorFieldNumber = 4,
    kDirFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // .Protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // .Protocol.ErrorObj error = 4;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Protocol::ErrorObj& error() const;
  PROTOBUF_NODISCARD ::Protocol::ErrorObj* release_error();
  ::Protocol::ErrorObj* mutable_error();
  void set_allocated_error(::Protocol::ErrorObj* error);
  private:
  const ::Protocol::ErrorObj& _internal_error() const;
  ::Protocol::ErrorObj* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Protocol::ErrorObj* error);
  ::Protocol::ErrorObj* unsafe_arena_release_error();

  // .Protocol.MoveDir dir = 2;
  void clear_dir();
  ::Protocol::MoveDir dir() const;
  void set_dir(::Protocol::MoveDir value);
  private:
  ::Protocol::MoveDir _internal_dir() const;
  void _internal_set_dir(::Protocol::MoveDir value);
  public:

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    ::Protocol::ErrorObj* error_;
    int dir_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_SHOT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SHOT) */ {
 public:
  inline C_SHOT() : C_SHOT(nullptr) {}
  ~C_SHOT() override;
  explicit PROTOBUF_CONSTEXPR C_SHOT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SHOT(const C_SHOT& from);
  C_SHOT(C_SHOT&& from) noexcept
    : C_SHOT() {
    *this = ::std::move(from);
  }

  inline C_SHOT& operator=(const C_SHOT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SHOT& operator=(C_SHOT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SHOT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SHOT* internal_default_instance() {
    return reinterpret_cast<const C_SHOT*>(
               &_C_SHOT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(C_SHOT& a, C_SHOT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SHOT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SHOT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SHOT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SHOT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_SHOT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_SHOT& from) {
    C_SHOT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SHOT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SHOT";
  }
  protected:
  explicit C_SHOT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kSpawnPosXFieldNumber = 2,
    kSpawnPosYFieldNumber = 3,
    kTargetPosXFieldNumber = 4,
    kTargetPosYFieldNumber = 5,
  };
  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // float spawnPosX = 2;
  void clear_spawnposx();
  float spawnposx() const;
  void set_spawnposx(float value);
  private:
  float _internal_spawnposx() const;
  void _internal_set_spawnposx(float value);
  public:

  // float spawnPosY = 3;
  void clear_spawnposy();
  float spawnposy() const;
  void set_spawnposy(float value);
  private:
  float _internal_spawnposy() const;
  void _internal_set_spawnposy(float value);
  public:

  // float targetPosX = 4;
  void clear_targetposx();
  float targetposx() const;
  void set_targetposx(float value);
  private:
  float _internal_targetposx() const;
  void _internal_set_targetposx(float value);
  public:

  // float targetPosY = 5;
  void clear_targetposy();
  float targetposy() const;
  void set_targetposy(float value);
  private:
  float _internal_targetposy() const;
  void _internal_set_targetposy(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SHOT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t playerid_;
    float spawnposx_;
    float spawnposy_;
    float targetposx_;
    float targetposy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SHOT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SHOT) */ {
 public:
  inline S_SHOT() : S_SHOT(nullptr) {}
  ~S_SHOT() override;
  explicit PROTOBUF_CONSTEXPR S_SHOT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SHOT(const S_SHOT& from);
  S_SHOT(S_SHOT&& from) noexcept
    : S_SHOT() {
    *this = ::std::move(from);
  }

  inline S_SHOT& operator=(const S_SHOT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SHOT& operator=(S_SHOT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SHOT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SHOT* internal_default_instance() {
    return reinterpret_cast<const S_SHOT*>(
               &_S_SHOT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S_SHOT& a, S_SHOT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SHOT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SHOT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SHOT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SHOT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SHOT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SHOT& from) {
    S_SHOT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SHOT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SHOT";
  }
  protected:
  explicit S_SHOT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 7,
    kPlayerIdFieldNumber = 1,
    kSpawnPosXFieldNumber = 2,
    kSpawnPosYFieldNumber = 3,
    kTargetPosXFieldNumber = 4,
    kTargetPosYFieldNumber = 5,
    kSuccessFieldNumber = 6,
  };
  // .Protocol.ErrorObj error = 7;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Protocol::ErrorObj& error() const;
  PROTOBUF_NODISCARD ::Protocol::ErrorObj* release_error();
  ::Protocol::ErrorObj* mutable_error();
  void set_allocated_error(::Protocol::ErrorObj* error);
  private:
  const ::Protocol::ErrorObj& _internal_error() const;
  ::Protocol::ErrorObj* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Protocol::ErrorObj* error);
  ::Protocol::ErrorObj* unsafe_arena_release_error();

  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // float spawnPosX = 2;
  void clear_spawnposx();
  float spawnposx() const;
  void set_spawnposx(float value);
  private:
  float _internal_spawnposx() const;
  void _internal_set_spawnposx(float value);
  public:

  // float spawnPosY = 3;
  void clear_spawnposy();
  float spawnposy() const;
  void set_spawnposy(float value);
  private:
  float _internal_spawnposy() const;
  void _internal_set_spawnposy(float value);
  public:

  // float targetPosX = 4;
  void clear_targetposx();
  float targetposx() const;
  void set_targetposx(float value);
  private:
  float _internal_targetposx() const;
  void _internal_set_targetposx(float value);
  public:

  // float targetPosY = 5;
  void clear_targetposy();
  float targetposy() const;
  void set_targetposy(float value);
  private:
  float _internal_targetposy() const;
  void _internal_set_targetposy(float value);
  public:

  // bool success = 6;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SHOT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ErrorObj* error_;
    uint64_t playerid_;
    float spawnposx_;
    float spawnposy_;
    float targetposx_;
    float targetposy_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_HIT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_HIT) */ {
 public:
  inline C_HIT() : C_HIT(nullptr) {}
  ~C_HIT() override;
  explicit PROTOBUF_CONSTEXPR C_HIT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_HIT(const C_HIT& from);
  C_HIT(C_HIT&& from) noexcept
    : C_HIT() {
    *this = ::std::move(from);
  }

  inline C_HIT& operator=(const C_HIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_HIT& operator=(C_HIT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_HIT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_HIT* internal_default_instance() {
    return reinterpret_cast<const C_HIT*>(
               &_C_HIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(C_HIT& a, C_HIT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_HIT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_HIT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_HIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_HIT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_HIT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_HIT& from) {
    C_HIT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_HIT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_HIT";
  }
  protected:
  explicit C_HIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kShotPlayerIdFieldNumber = 2,
    kDamageFieldNumber = 3,
  };
  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // uint64 shotPlayerId = 2;
  void clear_shotplayerid();
  uint64_t shotplayerid() const;
  void set_shotplayerid(uint64_t value);
  private:
  uint64_t _internal_shotplayerid() const;
  void _internal_set_shotplayerid(uint64_t value);
  public:

  // uint64 damage = 3;
  void clear_damage();
  uint64_t damage() const;
  void set_damage(uint64_t value);
  private:
  uint64_t _internal_damage() const;
  void _internal_set_damage(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_HIT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t playerid_;
    uint64_t shotplayerid_;
    uint64_t damage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_HIT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_HIT) */ {
 public:
  inline S_HIT() : S_HIT(nullptr) {}
  ~S_HIT() override;
  explicit PROTOBUF_CONSTEXPR S_HIT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_HIT(const S_HIT& from);
  S_HIT(S_HIT&& from) noexcept
    : S_HIT() {
    *this = ::std::move(from);
  }

  inline S_HIT& operator=(const S_HIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_HIT& operator=(S_HIT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_HIT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_HIT* internal_default_instance() {
    return reinterpret_cast<const S_HIT*>(
               &_S_HIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S_HIT& a, S_HIT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_HIT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_HIT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_HIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_HIT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_HIT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_HIT& from) {
    S_HIT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_HIT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_HIT";
  }
  protected:
  explicit S_HIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 5,
    kPlayerIdFieldNumber = 1,
    kCurrentHPFieldNumber = 2,
    kStateFieldNumber = 3,
    kSuccessFieldNumber = 4,
  };
  // .Protocol.ErrorObj error = 5;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Protocol::ErrorObj& error() const;
  PROTOBUF_NODISCARD ::Protocol::ErrorObj* release_error();
  ::Protocol::ErrorObj* mutable_error();
  void set_allocated_error(::Protocol::ErrorObj* error);
  private:
  const ::Protocol::ErrorObj& _internal_error() const;
  ::Protocol::ErrorObj* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Protocol::ErrorObj* error);
  ::Protocol::ErrorObj* unsafe_arena_release_error();

  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // uint64 currentHP = 2;
  void clear_currenthp();
  uint64_t currenthp() const;
  void set_currenthp(uint64_t value);
  private:
  uint64_t _internal_currenthp() const;
  void _internal_set_currenthp(uint64_t value);
  public:

  // .Protocol.PlayerState state = 3;
  void clear_state();
  ::Protocol::PlayerState state() const;
  void set_state(::Protocol::PlayerState value);
  private:
  ::Protocol::PlayerState _internal_state() const;
  void _internal_set_state(::Protocol::PlayerState value);
  public:

  // bool success = 4;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_HIT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ErrorObj* error_;
    uint64_t playerid_;
    uint64_t currenthp_;
    int state_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_EAT_ROOM_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_EAT_ROOM_ITEM) */ {
 public:
  inline C_EAT_ROOM_ITEM() : C_EAT_ROOM_ITEM(nullptr) {}
  ~C_EAT_ROOM_ITEM() override;
  explicit PROTOBUF_CONSTEXPR C_EAT_ROOM_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_EAT_ROOM_ITEM(const C_EAT_ROOM_ITEM& from);
  C_EAT_ROOM_ITEM(C_EAT_ROOM_ITEM&& from) noexcept
    : C_EAT_ROOM_ITEM() {
    *this = ::std::move(from);
  }

  inline C_EAT_ROOM_ITEM& operator=(const C_EAT_ROOM_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_EAT_ROOM_ITEM& operator=(C_EAT_ROOM_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_EAT_ROOM_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_EAT_ROOM_ITEM* internal_default_instance() {
    return reinterpret_cast<const C_EAT_ROOM_ITEM*>(
               &_C_EAT_ROOM_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(C_EAT_ROOM_ITEM& a, C_EAT_ROOM_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_EAT_ROOM_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_EAT_ROOM_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_EAT_ROOM_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_EAT_ROOM_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_EAT_ROOM_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_EAT_ROOM_ITEM& from) {
    C_EAT_ROOM_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_EAT_ROOM_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_EAT_ROOM_ITEM";
  }
  protected:
  explicit C_EAT_ROOM_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // .Protocol.RoomItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::Protocol::RoomItem& item() const;
  PROTOBUF_NODISCARD ::Protocol::RoomItem* release_item();
  ::Protocol::RoomItem* mutable_item();
  void set_allocated_item(::Protocol::RoomItem* item);
  private:
  const ::Protocol::RoomItem& _internal_item() const;
  ::Protocol::RoomItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::Protocol::RoomItem* item);
  ::Protocol::RoomItem* unsafe_arena_release_item();

  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_EAT_ROOM_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::RoomItem* item_;
    uint64_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_EAT_ROOM_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_EAT_ROOM_ITEM) */ {
 public:
  inline S_EAT_ROOM_ITEM() : S_EAT_ROOM_ITEM(nullptr) {}
  ~S_EAT_ROOM_ITEM() override;
  explicit PROTOBUF_CONSTEXPR S_EAT_ROOM_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_EAT_ROOM_ITEM(const S_EAT_ROOM_ITEM& from);
  S_EAT_ROOM_ITEM(S_EAT_ROOM_ITEM&& from) noexcept
    : S_EAT_ROOM_ITEM() {
    *this = ::std::move(from);
  }

  inline S_EAT_ROOM_ITEM& operator=(const S_EAT_ROOM_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_EAT_ROOM_ITEM& operator=(S_EAT_ROOM_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_EAT_ROOM_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_EAT_ROOM_ITEM* internal_default_instance() {
    return reinterpret_cast<const S_EAT_ROOM_ITEM*>(
               &_S_EAT_ROOM_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(S_EAT_ROOM_ITEM& a, S_EAT_ROOM_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_EAT_ROOM_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_EAT_ROOM_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_EAT_ROOM_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_EAT_ROOM_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_EAT_ROOM_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_EAT_ROOM_ITEM& from) {
    S_EAT_ROOM_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_EAT_ROOM_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_EAT_ROOM_ITEM";
  }
  protected:
  explicit S_EAT_ROOM_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kErrorFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // .Protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // .Protocol.ErrorObj error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Protocol::ErrorObj& error() const;
  PROTOBUF_NODISCARD ::Protocol::ErrorObj* release_error();
  ::Protocol::ErrorObj* mutable_error();
  void set_allocated_error(::Protocol::ErrorObj* error);
  private:
  const ::Protocol::ErrorObj& _internal_error() const;
  ::Protocol::ErrorObj* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Protocol::ErrorObj* error);
  ::Protocol::ErrorObj* unsafe_arena_release_error();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_EAT_ROOM_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    ::Protocol::ErrorObj* error_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_USE_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_USE_ITEM) */ {
 public:
  inline C_USE_ITEM() : C_USE_ITEM(nullptr) {}
  ~C_USE_ITEM() override;
  explicit PROTOBUF_CONSTEXPR C_USE_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_USE_ITEM(const C_USE_ITEM& from);
  C_USE_ITEM(C_USE_ITEM&& from) noexcept
    : C_USE_ITEM() {
    *this = ::std::move(from);
  }

  inline C_USE_ITEM& operator=(const C_USE_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_USE_ITEM& operator=(C_USE_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_USE_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_USE_ITEM* internal_default_instance() {
    return reinterpret_cast<const C_USE_ITEM*>(
               &_C_USE_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(C_USE_ITEM& a, C_USE_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_USE_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_USE_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_USE_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_USE_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_USE_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_USE_ITEM& from) {
    C_USE_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_USE_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_USE_ITEM";
  }
  protected:
  explicit C_USE_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // .Protocol.Item item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::Protocol::Item& item() const;
  PROTOBUF_NODISCARD ::Protocol::Item* release_item();
  ::Protocol::Item* mutable_item();
  void set_allocated_item(::Protocol::Item* item);
  private:
  const ::Protocol::Item& _internal_item() const;
  ::Protocol::Item* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::Protocol::Item* item);
  ::Protocol::Item* unsafe_arena_release_item();

  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_USE_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Item* item_;
    uint64_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_USE_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_USE_ITEM) */ {
 public:
  inline S_USE_ITEM() : S_USE_ITEM(nullptr) {}
  ~S_USE_ITEM() override;
  explicit PROTOBUF_CONSTEXPR S_USE_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_USE_ITEM(const S_USE_ITEM& from);
  S_USE_ITEM(S_USE_ITEM&& from) noexcept
    : S_USE_ITEM() {
    *this = ::std::move(from);
  }

  inline S_USE_ITEM& operator=(const S_USE_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_USE_ITEM& operator=(S_USE_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_USE_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_USE_ITEM* internal_default_instance() {
    return reinterpret_cast<const S_USE_ITEM*>(
               &_S_USE_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(S_USE_ITEM& a, S_USE_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_USE_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_USE_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_USE_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_USE_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_USE_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_USE_ITEM& from) {
    S_USE_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_USE_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_USE_ITEM";
  }
  protected:
  explicit S_USE_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kErrorFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // .Protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // .Protocol.ErrorObj error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Protocol::ErrorObj& error() const;
  PROTOBUF_NODISCARD ::Protocol::ErrorObj* release_error();
  ::Protocol::ErrorObj* mutable_error();
  void set_allocated_error(::Protocol::ErrorObj* error);
  private:
  const ::Protocol::ErrorObj& _internal_error() const;
  ::Protocol::ErrorObj* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Protocol::ErrorObj* error);
  ::Protocol::ErrorObj* unsafe_arena_release_error();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_USE_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    ::Protocol::ErrorObj* error_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CREATE_PARTY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CREATE_PARTY) */ {
 public:
  inline C_CREATE_PARTY() : C_CREATE_PARTY(nullptr) {}
  ~C_CREATE_PARTY() override;
  explicit PROTOBUF_CONSTEXPR C_CREATE_PARTY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CREATE_PARTY(const C_CREATE_PARTY& from);
  C_CREATE_PARTY(C_CREATE_PARTY&& from) noexcept
    : C_CREATE_PARTY() {
    *this = ::std::move(from);
  }

  inline C_CREATE_PARTY& operator=(const C_CREATE_PARTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CREATE_PARTY& operator=(C_CREATE_PARTY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CREATE_PARTY& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CREATE_PARTY* internal_default_instance() {
    return reinterpret_cast<const C_CREATE_PARTY*>(
               &_C_CREATE_PARTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(C_CREATE_PARTY& a, C_CREATE_PARTY& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CREATE_PARTY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CREATE_PARTY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CREATE_PARTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CREATE_PARTY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CREATE_PARTY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_CREATE_PARTY& from) {
    C_CREATE_PARTY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CREATE_PARTY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CREATE_PARTY";
  }
  protected:
  explicit C_CREATE_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
  };
  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // uint64 partyId = 2;
  void clear_partyid();
  uint64_t partyid() const;
  void set_partyid(uint64_t value);
  private:
  uint64_t _internal_partyid() const;
  void _internal_set_partyid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CREATE_PARTY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t playerid_;
    uint64_t partyid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CREATE_PARTY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CREATE_PARTY) */ {
 public:
  inline S_CREATE_PARTY() : S_CREATE_PARTY(nullptr) {}
  ~S_CREATE_PARTY() override;
  explicit PROTOBUF_CONSTEXPR S_CREATE_PARTY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CREATE_PARTY(const S_CREATE_PARTY& from);
  S_CREATE_PARTY(S_CREATE_PARTY&& from) noexcept
    : S_CREATE_PARTY() {
    *this = ::std::move(from);
  }

  inline S_CREATE_PARTY& operator=(const S_CREATE_PARTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CREATE_PARTY& operator=(S_CREATE_PARTY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CREATE_PARTY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CREATE_PARTY* internal_default_instance() {
    return reinterpret_cast<const S_CREATE_PARTY*>(
               &_S_CREATE_PARTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(S_CREATE_PARTY& a, S_CREATE_PARTY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CREATE_PARTY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CREATE_PARTY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CREATE_PARTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CREATE_PARTY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CREATE_PARTY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_CREATE_PARTY& from) {
    S_CREATE_PARTY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CREATE_PARTY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CREATE_PARTY";
  }
  protected:
  explicit S_CREATE_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 3,
    kPartyIdFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.ErrorObj error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Protocol::ErrorObj& error() const;
  PROTOBUF_NODISCARD ::Protocol::ErrorObj* release_error();
  ::Protocol::ErrorObj* mutable_error();
  void set_allocated_error(::Protocol::ErrorObj* error);
  private:
  const ::Protocol::ErrorObj& _internal_error() const;
  ::Protocol::ErrorObj* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Protocol::ErrorObj* error);
  ::Protocol::ErrorObj* unsafe_arena_release_error();

  // uint64 partyId = 2;
  void clear_partyid();
  uint64_t partyid() const;
  void set_partyid(uint64_t value);
  private:
  uint64_t _internal_partyid() const;
  void _internal_set_partyid(uint64_t value);
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CREATE_PARTY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ErrorObj* error_;
    uint64_t partyid_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_JOIN_PARTY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_JOIN_PARTY) */ {
 public:
  inline C_JOIN_PARTY() : C_JOIN_PARTY(nullptr) {}
  ~C_JOIN_PARTY() override;
  explicit PROTOBUF_CONSTEXPR C_JOIN_PARTY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_JOIN_PARTY(const C_JOIN_PARTY& from);
  C_JOIN_PARTY(C_JOIN_PARTY&& from) noexcept
    : C_JOIN_PARTY() {
    *this = ::std::move(from);
  }

  inline C_JOIN_PARTY& operator=(const C_JOIN_PARTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_JOIN_PARTY& operator=(C_JOIN_PARTY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_JOIN_PARTY& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_JOIN_PARTY* internal_default_instance() {
    return reinterpret_cast<const C_JOIN_PARTY*>(
               &_C_JOIN_PARTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(C_JOIN_PARTY& a, C_JOIN_PARTY& b) {
    a.Swap(&b);
  }
  inline void Swap(C_JOIN_PARTY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_JOIN_PARTY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_JOIN_PARTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_JOIN_PARTY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_JOIN_PARTY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_JOIN_PARTY& from) {
    C_JOIN_PARTY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_JOIN_PARTY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_JOIN_PARTY";
  }
  protected:
  explicit C_JOIN_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
  };
  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // uint64 partyId = 2;
  void clear_partyid();
  uint64_t partyid() const;
  void set_partyid(uint64_t value);
  private:
  uint64_t _internal_partyid() const;
  void _internal_set_partyid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_JOIN_PARTY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t playerid_;
    uint64_t partyid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_JOIN_PARTY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_JOIN_PARTY) */ {
 public:
  inline S_JOIN_PARTY() : S_JOIN_PARTY(nullptr) {}
  ~S_JOIN_PARTY() override;
  explicit PROTOBUF_CONSTEXPR S_JOIN_PARTY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_JOIN_PARTY(const S_JOIN_PARTY& from);
  S_JOIN_PARTY(S_JOIN_PARTY&& from) noexcept
    : S_JOIN_PARTY() {
    *this = ::std::move(from);
  }

  inline S_JOIN_PARTY& operator=(const S_JOIN_PARTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_JOIN_PARTY& operator=(S_JOIN_PARTY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_JOIN_PARTY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_JOIN_PARTY* internal_default_instance() {
    return reinterpret_cast<const S_JOIN_PARTY*>(
               &_S_JOIN_PARTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(S_JOIN_PARTY& a, S_JOIN_PARTY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_JOIN_PARTY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_JOIN_PARTY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_JOIN_PARTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_JOIN_PARTY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_JOIN_PARTY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_JOIN_PARTY& from) {
    S_JOIN_PARTY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_JOIN_PARTY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_JOIN_PARTY";
  }
  protected:
  explicit S_JOIN_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kPlayersFieldNumber = 4,
    kPartyIdFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.ErrorObj error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Protocol::ErrorObj& error() const;
  PROTOBUF_NODISCARD ::Protocol::ErrorObj* release_error();
  ::Protocol::ErrorObj* mutable_error();
  void set_allocated_error(::Protocol::ErrorObj* error);
  private:
  const ::Protocol::ErrorObj& _internal_error() const;
  ::Protocol::ErrorObj* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Protocol::ErrorObj* error);
  ::Protocol::ErrorObj* unsafe_arena_release_error();

  // .Protocol.Player players = 4;
  bool has_players() const;
  private:
  bool _internal_has_players() const;
  public:
  void clear_players();
  const ::Protocol::Player& players() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_players();
  ::Protocol::Player* mutable_players();
  void set_allocated_players(::Protocol::Player* players);
  private:
  const ::Protocol::Player& _internal_players() const;
  ::Protocol::Player* _internal_mutable_players();
  public:
  void unsafe_arena_set_allocated_players(
      ::Protocol::Player* players);
  ::Protocol::Player* unsafe_arena_release_players();

  // uint64 partyId = 3;
  void clear_partyid();
  uint64_t partyid() const;
  void set_partyid(uint64_t value);
  private:
  uint64_t _internal_partyid() const;
  void _internal_set_partyid(uint64_t value);
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_JOIN_PARTY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ErrorObj* error_;
    ::Protocol::Player* players_;
    uint64_t partyid_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_WITHDRAW_PARTY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_WITHDRAW_PARTY) */ {
 public:
  inline C_WITHDRAW_PARTY() : C_WITHDRAW_PARTY(nullptr) {}
  ~C_WITHDRAW_PARTY() override;
  explicit PROTOBUF_CONSTEXPR C_WITHDRAW_PARTY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_WITHDRAW_PARTY(const C_WITHDRAW_PARTY& from);
  C_WITHDRAW_PARTY(C_WITHDRAW_PARTY&& from) noexcept
    : C_WITHDRAW_PARTY() {
    *this = ::std::move(from);
  }

  inline C_WITHDRAW_PARTY& operator=(const C_WITHDRAW_PARTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_WITHDRAW_PARTY& operator=(C_WITHDRAW_PARTY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_WITHDRAW_PARTY& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_WITHDRAW_PARTY* internal_default_instance() {
    return reinterpret_cast<const C_WITHDRAW_PARTY*>(
               &_C_WITHDRAW_PARTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(C_WITHDRAW_PARTY& a, C_WITHDRAW_PARTY& b) {
    a.Swap(&b);
  }
  inline void Swap(C_WITHDRAW_PARTY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_WITHDRAW_PARTY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_WITHDRAW_PARTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_WITHDRAW_PARTY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_WITHDRAW_PARTY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_WITHDRAW_PARTY& from) {
    C_WITHDRAW_PARTY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_WITHDRAW_PARTY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_WITHDRAW_PARTY";
  }
  protected:
  explicit C_WITHDRAW_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
  };
  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // uint64 partyId = 2;
  void clear_partyid();
  uint64_t partyid() const;
  void set_partyid(uint64_t value);
  private:
  uint64_t _internal_partyid() const;
  void _internal_set_partyid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_WITHDRAW_PARTY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t playerid_;
    uint64_t partyid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_WITHDRAW_PARTY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_WITHDRAW_PARTY) */ {
 public:
  inline S_WITHDRAW_PARTY() : S_WITHDRAW_PARTY(nullptr) {}
  ~S_WITHDRAW_PARTY() override;
  explicit PROTOBUF_CONSTEXPR S_WITHDRAW_PARTY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_WITHDRAW_PARTY(const S_WITHDRAW_PARTY& from);
  S_WITHDRAW_PARTY(S_WITHDRAW_PARTY&& from) noexcept
    : S_WITHDRAW_PARTY() {
    *this = ::std::move(from);
  }

  inline S_WITHDRAW_PARTY& operator=(const S_WITHDRAW_PARTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_WITHDRAW_PARTY& operator=(S_WITHDRAW_PARTY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_WITHDRAW_PARTY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_WITHDRAW_PARTY* internal_default_instance() {
    return reinterpret_cast<const S_WITHDRAW_PARTY*>(
               &_S_WITHDRAW_PARTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(S_WITHDRAW_PARTY& a, S_WITHDRAW_PARTY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_WITHDRAW_PARTY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_WITHDRAW_PARTY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_WITHDRAW_PARTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_WITHDRAW_PARTY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_WITHDRAW_PARTY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_WITHDRAW_PARTY& from) {
    S_WITHDRAW_PARTY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_WITHDRAW_PARTY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_WITHDRAW_PARTY";
  }
  protected:
  explicit S_WITHDRAW_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 4,
    kErrorFieldNumber = 2,
    kPartyIdFieldNumber = 3,
    kWithdrawPlayerIdFieldNumber = 5,
    kSuccessFieldNumber = 1,
  };
  // repeated .Protocol.Player players = 4;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Protocol::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >*
      mutable_players();
  private:
  const ::Protocol::Player& _internal_players(int index) const;
  ::Protocol::Player* _internal_add_players();
  public:
  const ::Protocol::Player& players(int index) const;
  ::Protocol::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >&
      players() const;

  // .Protocol.ErrorObj error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Protocol::ErrorObj& error() const;
  PROTOBUF_NODISCARD ::Protocol::ErrorObj* release_error();
  ::Protocol::ErrorObj* mutable_error();
  void set_allocated_error(::Protocol::ErrorObj* error);
  private:
  const ::Protocol::ErrorObj& _internal_error() const;
  ::Protocol::ErrorObj* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Protocol::ErrorObj* error);
  ::Protocol::ErrorObj* unsafe_arena_release_error();

  // uint64 partyId = 3;
  void clear_partyid();
  uint64_t partyid() const;
  void set_partyid(uint64_t value);
  private:
  uint64_t _internal_partyid() const;
  void _internal_set_partyid(uint64_t value);
  public:

  // uint64 withdrawPlayerId = 5;
  void clear_withdrawplayerid();
  uint64_t withdrawplayerid() const;
  void set_withdrawplayerid(uint64_t value);
  private:
  uint64_t _internal_withdrawplayerid() const;
  void _internal_set_withdrawplayerid(uint64_t value);
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_WITHDRAW_PARTY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player > players_;
    ::Protocol::ErrorObj* error_;
    uint64_t partyid_;
    uint64_t withdrawplayerid_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MY_PARTY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MY_PARTY) */ {
 public:
  inline C_MY_PARTY() : C_MY_PARTY(nullptr) {}
  ~C_MY_PARTY() override;
  explicit PROTOBUF_CONSTEXPR C_MY_PARTY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MY_PARTY(const C_MY_PARTY& from);
  C_MY_PARTY(C_MY_PARTY&& from) noexcept
    : C_MY_PARTY() {
    *this = ::std::move(from);
  }

  inline C_MY_PARTY& operator=(const C_MY_PARTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MY_PARTY& operator=(C_MY_PARTY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MY_PARTY& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MY_PARTY* internal_default_instance() {
    return reinterpret_cast<const C_MY_PARTY*>(
               &_C_MY_PARTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(C_MY_PARTY& a, C_MY_PARTY& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MY_PARTY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MY_PARTY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MY_PARTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MY_PARTY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MY_PARTY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MY_PARTY& from) {
    C_MY_PARTY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MY_PARTY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MY_PARTY";
  }
  protected:
  explicit C_MY_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_MY_PARTY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MY_PARTY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MY_PARTY) */ {
 public:
  inline S_MY_PARTY() : S_MY_PARTY(nullptr) {}
  ~S_MY_PARTY() override;
  explicit PROTOBUF_CONSTEXPR S_MY_PARTY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MY_PARTY(const S_MY_PARTY& from);
  S_MY_PARTY(S_MY_PARTY&& from) noexcept
    : S_MY_PARTY() {
    *this = ::std::move(from);
  }

  inline S_MY_PARTY& operator=(const S_MY_PARTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MY_PARTY& operator=(S_MY_PARTY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MY_PARTY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MY_PARTY* internal_default_instance() {
    return reinterpret_cast<const S_MY_PARTY*>(
               &_S_MY_PARTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(S_MY_PARTY& a, S_MY_PARTY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MY_PARTY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MY_PARTY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MY_PARTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MY_PARTY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MY_PARTY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MY_PARTY& from) {
    S_MY_PARTY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MY_PARTY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MY_PARTY";
  }
  protected:
  explicit S_MY_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 4,
    kErrorFieldNumber = 2,
    kPartyIdFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // repeated .Protocol.Player players = 4;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Protocol::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >*
      mutable_players();
  private:
  const ::Protocol::Player& _internal_players(int index) const;
  ::Protocol::Player* _internal_add_players();
  public:
  const ::Protocol::Player& players(int index) const;
  ::Protocol::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >&
      players() const;

  // .Protocol.ErrorObj error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Protocol::ErrorObj& error() const;
  PROTOBUF_NODISCARD ::Protocol::ErrorObj* release_error();
  ::Protocol::ErrorObj* mutable_error();
  void set_allocated_error(::Protocol::ErrorObj* error);
  private:
  const ::Protocol::ErrorObj& _internal_error() const;
  ::Protocol::ErrorObj* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Protocol::ErrorObj* error);
  ::Protocol::ErrorObj* unsafe_arena_release_error();

  // uint64 partyId = 3;
  void clear_partyid();
  uint64_t partyid() const;
  void set_partyid(uint64_t value);
  private:
  uint64_t _internal_partyid() const;
  void _internal_set_partyid(uint64_t value);
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MY_PARTY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player > players_;
    ::Protocol::ErrorObj* error_;
    uint64_t partyid_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ALL_PARTY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ALL_PARTY) */ {
 public:
  inline C_ALL_PARTY() : C_ALL_PARTY(nullptr) {}
  ~C_ALL_PARTY() override;
  explicit PROTOBUF_CONSTEXPR C_ALL_PARTY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ALL_PARTY(const C_ALL_PARTY& from);
  C_ALL_PARTY(C_ALL_PARTY&& from) noexcept
    : C_ALL_PARTY() {
    *this = ::std::move(from);
  }

  inline C_ALL_PARTY& operator=(const C_ALL_PARTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ALL_PARTY& operator=(C_ALL_PARTY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ALL_PARTY& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ALL_PARTY* internal_default_instance() {
    return reinterpret_cast<const C_ALL_PARTY*>(
               &_C_ALL_PARTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(C_ALL_PARTY& a, C_ALL_PARTY& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ALL_PARTY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ALL_PARTY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ALL_PARTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ALL_PARTY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ALL_PARTY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ALL_PARTY& from) {
    C_ALL_PARTY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ALL_PARTY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ALL_PARTY";
  }
  protected:
  explicit C_ALL_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ALL_PARTY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ALL_PARTY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ALL_PARTY) */ {
 public:
  inline S_ALL_PARTY() : S_ALL_PARTY(nullptr) {}
  ~S_ALL_PARTY() override;
  explicit PROTOBUF_CONSTEXPR S_ALL_PARTY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ALL_PARTY(const S_ALL_PARTY& from);
  S_ALL_PARTY(S_ALL_PARTY&& from) noexcept
    : S_ALL_PARTY() {
    *this = ::std::move(from);
  }

  inline S_ALL_PARTY& operator=(const S_ALL_PARTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ALL_PARTY& operator=(S_ALL_PARTY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ALL_PARTY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ALL_PARTY* internal_default_instance() {
    return reinterpret_cast<const S_ALL_PARTY*>(
               &_S_ALL_PARTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(S_ALL_PARTY& a, S_ALL_PARTY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ALL_PARTY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ALL_PARTY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ALL_PARTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ALL_PARTY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ALL_PARTY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ALL_PARTY& from) {
    S_ALL_PARTY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ALL_PARTY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ALL_PARTY";
  }
  protected:
  explicit S_ALL_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartiesFieldNumber = 3,
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // repeated .Protocol.Party parties = 3;
  int parties_size() const;
  private:
  int _internal_parties_size() const;
  public:
  void clear_parties();
  ::Protocol::Party* mutable_parties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Party >*
      mutable_parties();
  private:
  const ::Protocol::Party& _internal_parties(int index) const;
  ::Protocol::Party* _internal_add_parties();
  public:
  const ::Protocol::Party& parties(int index) const;
  ::Protocol::Party* add_parties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Party >&
      parties() const;

  // .Protocol.ErrorObj error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Protocol::ErrorObj& error() const;
  PROTOBUF_NODISCARD ::Protocol::ErrorObj* release_error();
  ::Protocol::ErrorObj* mutable_error();
  void set_allocated_error(::Protocol::ErrorObj* error);
  private:
  const ::Protocol::ErrorObj& _internal_error() const;
  ::Protocol::ErrorObj* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Protocol::ErrorObj* error);
  ::Protocol::ErrorObj* unsafe_arena_release_error();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ALL_PARTY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Party > parties_;
    ::Protocol::ErrorObj* error_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S_INVALID_ID

// uint64 playerId = 1;
inline void S_INVALID_ID::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t S_INVALID_ID::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t S_INVALID_ID::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INVALID_ID.playerId)
  return _internal_playerid();
}
inline void S_INVALID_ID::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_INVALID_ID::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_INVALID_ID.playerId)
}

// bool success = 2;
inline void S_INVALID_ID::clear_success() {
  _impl_.success_ = false;
}
inline bool S_INVALID_ID::_internal_success() const {
  return _impl_.success_;
}
inline bool S_INVALID_ID::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INVALID_ID.success)
  return _internal_success();
}
inline void S_INVALID_ID::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_INVALID_ID::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_INVALID_ID.success)
}

// .Protocol.ErrorObj error = 3;
inline bool S_INVALID_ID::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool S_INVALID_ID::has_error() const {
  return _internal_has_error();
}
inline const ::Protocol::ErrorObj& S_INVALID_ID::_internal_error() const {
  const ::Protocol::ErrorObj* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ErrorObj&>(
      ::Protocol::_ErrorObj_default_instance_);
}
inline const ::Protocol::ErrorObj& S_INVALID_ID::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INVALID_ID.error)
  return _internal_error();
}
inline void S_INVALID_ID::unsafe_arena_set_allocated_error(
    ::Protocol::ErrorObj* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_INVALID_ID.error)
}
inline ::Protocol::ErrorObj* S_INVALID_ID::release_error() {
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ErrorObj* S_INVALID_ID::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:Protocol.S_INVALID_ID.error)
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::Protocol::ErrorObj* S_INVALID_ID::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ErrorObj>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::Protocol::ErrorObj* S_INVALID_ID::mutable_error() {
  ::Protocol::ErrorObj* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Protocol.S_INVALID_ID.error)
  return _msg;
}
inline void S_INVALID_ID::set_allocated_error(::Protocol::ErrorObj* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_INVALID_ID.error)
}

// -------------------------------------------------------------------

// S_SERVER_CHAT

// .Protocol.ChatType type = 1;
inline void S_SERVER_CHAT::clear_type() {
  _impl_.type_ = 0;
}
inline ::Protocol::ChatType S_SERVER_CHAT::_internal_type() const {
  return static_cast< ::Protocol::ChatType >(_impl_.type_);
}
inline ::Protocol::ChatType S_SERVER_CHAT::type() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SERVER_CHAT.type)
  return _internal_type();
}
inline void S_SERVER_CHAT::_internal_set_type(::Protocol::ChatType value) {
  
  _impl_.type_ = value;
}
inline void S_SERVER_CHAT::set_type(::Protocol::ChatType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SERVER_CHAT.type)
}

// string msg = 2;
inline void S_SERVER_CHAT::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& S_SERVER_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SERVER_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_SERVER_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_SERVER_CHAT.msg)
}
inline std::string* S_SERVER_CHAT::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SERVER_CHAT.msg)
  return _s;
}
inline const std::string& S_SERVER_CHAT::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void S_SERVER_CHAT::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* S_SERVER_CHAT::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* S_SERVER_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.S_SERVER_CHAT.msg)
  return _impl_.msg_.Release();
}
inline void S_SERVER_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SERVER_CHAT.msg)
}

// -------------------------------------------------------------------

// C_CHECK_ROOM

// -------------------------------------------------------------------

// S_CHECK_ROOM

// uint64 count = 1;
inline void S_CHECK_ROOM::clear_count() {
  _impl_.count_ = uint64_t{0u};
}
inline uint64_t S_CHECK_ROOM::_internal_count() const {
  return _impl_.count_;
}
inline uint64_t S_CHECK_ROOM::count() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHECK_ROOM.count)
  return _internal_count();
}
inline void S_CHECK_ROOM::_internal_set_count(uint64_t value) {
  
  _impl_.count_ = value;
}
inline void S_CHECK_ROOM::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHECK_ROOM.count)
}

// -------------------------------------------------------------------

// S_CREATE_ROOM

// repeated .Protocol.RoomItem item = 1;
inline int S_CREATE_ROOM::_internal_item_size() const {
  return _impl_.item_.size();
}
inline int S_CREATE_ROOM::item_size() const {
  return _internal_item_size();
}
inline ::Protocol::RoomItem* S_CREATE_ROOM::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CREATE_ROOM.item)
  return _impl_.item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomItem >*
S_CREATE_ROOM::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_CREATE_ROOM.item)
  return &_impl_.item_;
}
inline const ::Protocol::RoomItem& S_CREATE_ROOM::_internal_item(int index) const {
  return _impl_.item_.Get(index);
}
inline const ::Protocol::RoomItem& S_CREATE_ROOM::item(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_ROOM.item)
  return _internal_item(index);
}
inline ::Protocol::RoomItem* S_CREATE_ROOM::_internal_add_item() {
  return _impl_.item_.Add();
}
inline ::Protocol::RoomItem* S_CREATE_ROOM::add_item() {
  ::Protocol::RoomItem* _add = _internal_add_item();
  // @@protoc_insertion_point(field_add:Protocol.S_CREATE_ROOM.item)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomItem >&
S_CREATE_ROOM::item() const {
  // @@protoc_insertion_point(field_list:Protocol.S_CREATE_ROOM.item)
  return _impl_.item_;
}

// -------------------------------------------------------------------

// S_DISCONNECT

// uint64 playerId = 1;
inline void S_DISCONNECT::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t S_DISCONNECT::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t S_DISCONNECT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DISCONNECT.playerId)
  return _internal_playerid();
}
inline void S_DISCONNECT::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_DISCONNECT::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DISCONNECT.playerId)
}

// -------------------------------------------------------------------

// C_SIGNUP

// .Protocol.Account account = 1;
inline bool C_SIGNUP::_internal_has_account() const {
  return this != internal_default_instance() && _impl_.account_ != nullptr;
}
inline bool C_SIGNUP::has_account() const {
  return _internal_has_account();
}
inline const ::Protocol::Account& C_SIGNUP::_internal_account() const {
  const ::Protocol::Account* p = _impl_.account_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Account&>(
      ::Protocol::_Account_default_instance_);
}
inline const ::Protocol::Account& C_SIGNUP::account() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SIGNUP.account)
  return _internal_account();
}
inline void C_SIGNUP::unsafe_arena_set_allocated_account(
    ::Protocol::Account* account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_);
  }
  _impl_.account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SIGNUP.account)
}
inline ::Protocol::Account* C_SIGNUP::release_account() {
  
  ::Protocol::Account* temp = _impl_.account_;
  _impl_.account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Account* C_SIGNUP::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:Protocol.C_SIGNUP.account)
  
  ::Protocol::Account* temp = _impl_.account_;
  _impl_.account_ = nullptr;
  return temp;
}
inline ::Protocol::Account* C_SIGNUP::_internal_mutable_account() {
  
  if (_impl_.account_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Account>(GetArenaForAllocation());
    _impl_.account_ = p;
  }
  return _impl_.account_;
}
inline ::Protocol::Account* C_SIGNUP::mutable_account() {
  ::Protocol::Account* _msg = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SIGNUP.account)
  return _msg;
}
inline void C_SIGNUP::set_allocated_account(::Protocol::Account* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account));
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.account_ = account;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SIGNUP.account)
}

// -------------------------------------------------------------------

// S_SIGNUP

// bool success = 1;
inline void S_SIGNUP::clear_success() {
  _impl_.success_ = false;
}
inline bool S_SIGNUP::_internal_success() const {
  return _impl_.success_;
}
inline bool S_SIGNUP::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SIGNUP.success)
  return _internal_success();
}
inline void S_SIGNUP::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_SIGNUP::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SIGNUP.success)
}

// .Protocol.ErrorObj error = 2;
inline bool S_SIGNUP::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool S_SIGNUP::has_error() const {
  return _internal_has_error();
}
inline const ::Protocol::ErrorObj& S_SIGNUP::_internal_error() const {
  const ::Protocol::ErrorObj* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ErrorObj&>(
      ::Protocol::_ErrorObj_default_instance_);
}
inline const ::Protocol::ErrorObj& S_SIGNUP::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SIGNUP.error)
  return _internal_error();
}
inline void S_SIGNUP::unsafe_arena_set_allocated_error(
    ::Protocol::ErrorObj* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SIGNUP.error)
}
inline ::Protocol::ErrorObj* S_SIGNUP::release_error() {
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ErrorObj* S_SIGNUP::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:Protocol.S_SIGNUP.error)
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::Protocol::ErrorObj* S_SIGNUP::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ErrorObj>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::Protocol::ErrorObj* S_SIGNUP::mutable_error() {
  ::Protocol::ErrorObj* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SIGNUP.error)
  return _msg;
}
inline void S_SIGNUP::set_allocated_error(::Protocol::ErrorObj* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SIGNUP.error)
}

// -------------------------------------------------------------------

// C_LOGIN

// .Protocol.Account account = 1;
inline bool C_LOGIN::_internal_has_account() const {
  return this != internal_default_instance() && _impl_.account_ != nullptr;
}
inline bool C_LOGIN::has_account() const {
  return _internal_has_account();
}
inline const ::Protocol::Account& C_LOGIN::_internal_account() const {
  const ::Protocol::Account* p = _impl_.account_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Account&>(
      ::Protocol::_Account_default_instance_);
}
inline const ::Protocol::Account& C_LOGIN::account() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGIN.account)
  return _internal_account();
}
inline void C_LOGIN::unsafe_arena_set_allocated_account(
    ::Protocol::Account* account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_);
  }
  _impl_.account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_LOGIN.account)
}
inline ::Protocol::Account* C_LOGIN::release_account() {
  
  ::Protocol::Account* temp = _impl_.account_;
  _impl_.account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Account* C_LOGIN::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:Protocol.C_LOGIN.account)
  
  ::Protocol::Account* temp = _impl_.account_;
  _impl_.account_ = nullptr;
  return temp;
}
inline ::Protocol::Account* C_LOGIN::_internal_mutable_account() {
  
  if (_impl_.account_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Account>(GetArenaForAllocation());
    _impl_.account_ = p;
  }
  return _impl_.account_;
}
inline ::Protocol::Account* C_LOGIN::mutable_account() {
  ::Protocol::Account* _msg = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:Protocol.C_LOGIN.account)
  return _msg;
}
inline void C_LOGIN::set_allocated_account(::Protocol::Account* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account));
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.account_ = account;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_LOGIN.account)
}

// -------------------------------------------------------------------

// S_LOGIN

// bool success = 1;
inline void S_LOGIN::clear_success() {
  _impl_.success_ = false;
}
inline bool S_LOGIN::_internal_success() const {
  return _impl_.success_;
}
inline bool S_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.success)
  return _internal_success();
}
inline void S_LOGIN::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.success)
}

// .Protocol.Player player = 2;
inline bool S_LOGIN::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool S_LOGIN::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_LOGIN::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_LOGIN::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.player)
  return _internal_player();
}
inline void S_LOGIN::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_LOGIN.player)
}
inline ::Protocol::Player* S_LOGIN::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* S_LOGIN::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_LOGIN.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_LOGIN::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* S_LOGIN::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN.player)
  return _msg;
}
inline void S_LOGIN::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_LOGIN.player)
}

// .Protocol.ErrorObj error = 3;
inline bool S_LOGIN::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool S_LOGIN::has_error() const {
  return _internal_has_error();
}
inline const ::Protocol::ErrorObj& S_LOGIN::_internal_error() const {
  const ::Protocol::ErrorObj* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ErrorObj&>(
      ::Protocol::_ErrorObj_default_instance_);
}
inline const ::Protocol::ErrorObj& S_LOGIN::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.error)
  return _internal_error();
}
inline void S_LOGIN::unsafe_arena_set_allocated_error(
    ::Protocol::ErrorObj* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_LOGIN.error)
}
inline ::Protocol::ErrorObj* S_LOGIN::release_error() {
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ErrorObj* S_LOGIN::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:Protocol.S_LOGIN.error)
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::Protocol::ErrorObj* S_LOGIN::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ErrorObj>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::Protocol::ErrorObj* S_LOGIN::mutable_error() {
  ::Protocol::ErrorObj* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN.error)
  return _msg;
}
inline void S_LOGIN::set_allocated_error(::Protocol::ErrorObj* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_LOGIN.error)
}

// -------------------------------------------------------------------

// C_ENTER_GAME

// .Protocol.Player player = 1;
inline bool C_ENTER_GAME::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool C_ENTER_GAME::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& C_ENTER_GAME::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& C_ENTER_GAME::player() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ENTER_GAME.player)
  return _internal_player();
}
inline void C_ENTER_GAME::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_ENTER_GAME.player)
}
inline ::Protocol::Player* C_ENTER_GAME::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* C_ENTER_GAME::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.C_ENTER_GAME.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* C_ENTER_GAME::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* C_ENTER_GAME::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.C_ENTER_GAME.player)
  return _msg;
}
inline void C_ENTER_GAME::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ENTER_GAME.player)
}

// -------------------------------------------------------------------

// S_ENTER_GAME

// .Protocol.ToPlayer toPlayer = 1;
inline void S_ENTER_GAME::clear_toplayer() {
  _impl_.toplayer_ = 0;
}
inline ::Protocol::ToPlayer S_ENTER_GAME::_internal_toplayer() const {
  return static_cast< ::Protocol::ToPlayer >(_impl_.toplayer_);
}
inline ::Protocol::ToPlayer S_ENTER_GAME::toplayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.toPlayer)
  return _internal_toplayer();
}
inline void S_ENTER_GAME::_internal_set_toplayer(::Protocol::ToPlayer value) {
  
  _impl_.toplayer_ = value;
}
inline void S_ENTER_GAME::set_toplayer(::Protocol::ToPlayer value) {
  _internal_set_toplayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_GAME.toPlayer)
}

// bool success = 2;
inline void S_ENTER_GAME::clear_success() {
  _impl_.success_ = false;
}
inline bool S_ENTER_GAME::_internal_success() const {
  return _impl_.success_;
}
inline bool S_ENTER_GAME::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.success)
  return _internal_success();
}
inline void S_ENTER_GAME::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_ENTER_GAME::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_GAME.success)
}

// repeated .Protocol.Player players = 3;
inline int S_ENTER_GAME::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int S_ENTER_GAME::players_size() const {
  return _internal_players_size();
}
inline ::Protocol::Player* S_ENTER_GAME::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ENTER_GAME.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >*
S_ENTER_GAME::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_ENTER_GAME.players)
  return &_impl_.players_;
}
inline const ::Protocol::Player& S_ENTER_GAME::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::Protocol::Player& S_ENTER_GAME::players(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.players)
  return _internal_players(index);
}
inline ::Protocol::Player* S_ENTER_GAME::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::Protocol::Player* S_ENTER_GAME::add_players() {
  ::Protocol::Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:Protocol.S_ENTER_GAME.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >&
S_ENTER_GAME::players() const {
  // @@protoc_insertion_point(field_list:Protocol.S_ENTER_GAME.players)
  return _impl_.players_;
}

// .Protocol.ErrorObj error = 4;
inline bool S_ENTER_GAME::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool S_ENTER_GAME::has_error() const {
  return _internal_has_error();
}
inline const ::Protocol::ErrorObj& S_ENTER_GAME::_internal_error() const {
  const ::Protocol::ErrorObj* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ErrorObj&>(
      ::Protocol::_ErrorObj_default_instance_);
}
inline const ::Protocol::ErrorObj& S_ENTER_GAME::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.error)
  return _internal_error();
}
inline void S_ENTER_GAME::unsafe_arena_set_allocated_error(
    ::Protocol::ErrorObj* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ENTER_GAME.error)
}
inline ::Protocol::ErrorObj* S_ENTER_GAME::release_error() {
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ErrorObj* S_ENTER_GAME::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:Protocol.S_ENTER_GAME.error)
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::Protocol::ErrorObj* S_ENTER_GAME::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ErrorObj>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::Protocol::ErrorObj* S_ENTER_GAME::mutable_error() {
  ::Protocol::ErrorObj* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ENTER_GAME.error)
  return _msg;
}
inline void S_ENTER_GAME::set_allocated_error(::Protocol::ErrorObj* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ENTER_GAME.error)
}

// -------------------------------------------------------------------

// C_CHAT

// .Protocol.ChatType type = 1;
inline void C_CHAT::clear_type() {
  _impl_.type_ = 0;
}
inline ::Protocol::ChatType C_CHAT::_internal_type() const {
  return static_cast< ::Protocol::ChatType >(_impl_.type_);
}
inline ::Protocol::ChatType C_CHAT::type() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHAT.type)
  return _internal_type();
}
inline void C_CHAT::_internal_set_type(::Protocol::ChatType value) {
  
  _impl_.type_ = value;
}
inline void C_CHAT::set_type(::Protocol::ChatType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CHAT.type)
}

// uint64 playerId = 2;
inline void C_CHAT::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t C_CHAT::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t C_CHAT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHAT.playerId)
  return _internal_playerid();
}
inline void C_CHAT::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void C_CHAT::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CHAT.playerId)
}

// string playerName = 3;
inline void C_CHAT::clear_playername() {
  _impl_.playername_.ClearToEmpty();
}
inline const std::string& C_CHAT::playername() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHAT.playerName)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHAT::set_playername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CHAT.playerName)
}
inline std::string* C_CHAT::mutable_playername() {
  std::string* _s = _internal_mutable_playername();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHAT.playerName)
  return _s;
}
inline const std::string& C_CHAT::_internal_playername() const {
  return _impl_.playername_.Get();
}
inline void C_CHAT::_internal_set_playername(const std::string& value) {
  
  _impl_.playername_.Set(value, GetArenaForAllocation());
}
inline std::string* C_CHAT::_internal_mutable_playername() {
  
  return _impl_.playername_.Mutable(GetArenaForAllocation());
}
inline std::string* C_CHAT::release_playername() {
  // @@protoc_insertion_point(field_release:Protocol.C_CHAT.playerName)
  return _impl_.playername_.Release();
}
inline void C_CHAT::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    
  } else {
    
  }
  _impl_.playername_.SetAllocated(playername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playername_.IsDefault()) {
    _impl_.playername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHAT.playerName)
}

// string msg = 4;
inline void C_CHAT::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& C_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CHAT.msg)
}
inline std::string* C_CHAT::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHAT.msg)
  return _s;
}
inline const std::string& C_CHAT::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void C_CHAT::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* C_CHAT::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* C_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.C_CHAT.msg)
  return _impl_.msg_.Release();
}
inline void C_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHAT.msg)
}

// uint64 targetId = 5;
inline void C_CHAT::clear_targetid() {
  _impl_.targetid_ = uint64_t{0u};
}
inline uint64_t C_CHAT::_internal_targetid() const {
  return _impl_.targetid_;
}
inline uint64_t C_CHAT::targetid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHAT.targetId)
  return _internal_targetid();
}
inline void C_CHAT::_internal_set_targetid(uint64_t value) {
  
  _impl_.targetid_ = value;
}
inline void C_CHAT::set_targetid(uint64_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CHAT.targetId)
}

// -------------------------------------------------------------------

// S_CHAT

// .Protocol.ChatType type = 1;
inline void S_CHAT::clear_type() {
  _impl_.type_ = 0;
}
inline ::Protocol::ChatType S_CHAT::_internal_type() const {
  return static_cast< ::Protocol::ChatType >(_impl_.type_);
}
inline ::Protocol::ChatType S_CHAT::type() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.type)
  return _internal_type();
}
inline void S_CHAT::_internal_set_type(::Protocol::ChatType value) {
  
  _impl_.type_ = value;
}
inline void S_CHAT::set_type(::Protocol::ChatType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.type)
}

// uint64 playerId = 2;
inline void S_CHAT::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t S_CHAT::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t S_CHAT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.playerId)
  return _internal_playerid();
}
inline void S_CHAT::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_CHAT::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.playerId)
}

// string playerName = 3;
inline void S_CHAT::clear_playername() {
  _impl_.playername_.ClearToEmpty();
}
inline const std::string& S_CHAT::playername() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.playerName)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHAT::set_playername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.playerName)
}
inline std::string* S_CHAT::mutable_playername() {
  std::string* _s = _internal_mutable_playername();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHAT.playerName)
  return _s;
}
inline const std::string& S_CHAT::_internal_playername() const {
  return _impl_.playername_.Get();
}
inline void S_CHAT::_internal_set_playername(const std::string& value) {
  
  _impl_.playername_.Set(value, GetArenaForAllocation());
}
inline std::string* S_CHAT::_internal_mutable_playername() {
  
  return _impl_.playername_.Mutable(GetArenaForAllocation());
}
inline std::string* S_CHAT::release_playername() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHAT.playerName)
  return _impl_.playername_.Release();
}
inline void S_CHAT::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    
  } else {
    
  }
  _impl_.playername_.SetAllocated(playername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playername_.IsDefault()) {
    _impl_.playername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHAT.playerName)
}

// string msg = 4;
inline void S_CHAT::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& S_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.msg)
}
inline std::string* S_CHAT::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHAT.msg)
  return _s;
}
inline const std::string& S_CHAT::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void S_CHAT::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* S_CHAT::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* S_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHAT.msg)
  return _impl_.msg_.Release();
}
inline void S_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHAT.msg)
}

// uint64 targetId = 5;
inline void S_CHAT::clear_targetid() {
  _impl_.targetid_ = uint64_t{0u};
}
inline uint64_t S_CHAT::_internal_targetid() const {
  return _impl_.targetid_;
}
inline uint64_t S_CHAT::targetid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.targetId)
  return _internal_targetid();
}
inline void S_CHAT::_internal_set_targetid(uint64_t value) {
  
  _impl_.targetid_ = value;
}
inline void S_CHAT::set_targetid(uint64_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.targetId)
}

// bool success = 6;
inline void S_CHAT::clear_success() {
  _impl_.success_ = false;
}
inline bool S_CHAT::_internal_success() const {
  return _impl_.success_;
}
inline bool S_CHAT::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.success)
  return _internal_success();
}
inline void S_CHAT::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_CHAT::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.success)
}

// .Protocol.ErrorObj error = 7;
inline bool S_CHAT::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool S_CHAT::has_error() const {
  return _internal_has_error();
}
inline const ::Protocol::ErrorObj& S_CHAT::_internal_error() const {
  const ::Protocol::ErrorObj* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ErrorObj&>(
      ::Protocol::_ErrorObj_default_instance_);
}
inline const ::Protocol::ErrorObj& S_CHAT::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.error)
  return _internal_error();
}
inline void S_CHAT::unsafe_arena_set_allocated_error(
    ::Protocol::ErrorObj* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_CHAT.error)
}
inline ::Protocol::ErrorObj* S_CHAT::release_error() {
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ErrorObj* S_CHAT::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHAT.error)
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::Protocol::ErrorObj* S_CHAT::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ErrorObj>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::Protocol::ErrorObj* S_CHAT::mutable_error() {
  ::Protocol::ErrorObj* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHAT.error)
  return _msg;
}
inline void S_CHAT::set_allocated_error(::Protocol::ErrorObj* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHAT.error)
}

// -------------------------------------------------------------------

// C_MOVE

// uint64 playerId = 1;
inline void C_MOVE::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t C_MOVE::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t C_MOVE::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.playerId)
  return _internal_playerid();
}
inline void C_MOVE::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void C_MOVE::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MOVE.playerId)
}

// float posX = 2;
inline void C_MOVE::clear_posx() {
  _impl_.posx_ = 0;
}
inline float C_MOVE::_internal_posx() const {
  return _impl_.posx_;
}
inline float C_MOVE::posx() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.posX)
  return _internal_posx();
}
inline void C_MOVE::_internal_set_posx(float value) {
  
  _impl_.posx_ = value;
}
inline void C_MOVE::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MOVE.posX)
}

// float posY = 3;
inline void C_MOVE::clear_posy() {
  _impl_.posy_ = 0;
}
inline float C_MOVE::_internal_posy() const {
  return _impl_.posy_;
}
inline float C_MOVE::posy() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.posY)
  return _internal_posy();
}
inline void C_MOVE::_internal_set_posy(float value) {
  
  _impl_.posy_ = value;
}
inline void C_MOVE::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MOVE.posY)
}

// .Protocol.MoveDir dir = 4;
inline void C_MOVE::clear_dir() {
  _impl_.dir_ = 0;
}
inline ::Protocol::MoveDir C_MOVE::_internal_dir() const {
  return static_cast< ::Protocol::MoveDir >(_impl_.dir_);
}
inline ::Protocol::MoveDir C_MOVE::dir() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.dir)
  return _internal_dir();
}
inline void C_MOVE::_internal_set_dir(::Protocol::MoveDir value) {
  
  _impl_.dir_ = value;
}
inline void C_MOVE::set_dir(::Protocol::MoveDir value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MOVE.dir)
}

// -------------------------------------------------------------------

// S_MOVE

// .Protocol.Player player = 1;
inline bool S_MOVE::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool S_MOVE::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_MOVE::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_MOVE::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE.player)
  return _internal_player();
}
inline void S_MOVE::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_MOVE.player)
}
inline ::Protocol::Player* S_MOVE::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* S_MOVE::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_MOVE.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_MOVE::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* S_MOVE::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_MOVE.player)
  return _msg;
}
inline void S_MOVE::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MOVE.player)
}

// .Protocol.MoveDir dir = 2;
inline void S_MOVE::clear_dir() {
  _impl_.dir_ = 0;
}
inline ::Protocol::MoveDir S_MOVE::_internal_dir() const {
  return static_cast< ::Protocol::MoveDir >(_impl_.dir_);
}
inline ::Protocol::MoveDir S_MOVE::dir() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE.dir)
  return _internal_dir();
}
inline void S_MOVE::_internal_set_dir(::Protocol::MoveDir value) {
  
  _impl_.dir_ = value;
}
inline void S_MOVE::set_dir(::Protocol::MoveDir value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MOVE.dir)
}

// bool success = 3;
inline void S_MOVE::clear_success() {
  _impl_.success_ = false;
}
inline bool S_MOVE::_internal_success() const {
  return _impl_.success_;
}
inline bool S_MOVE::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE.success)
  return _internal_success();
}
inline void S_MOVE::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_MOVE::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MOVE.success)
}

// .Protocol.ErrorObj error = 4;
inline bool S_MOVE::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool S_MOVE::has_error() const {
  return _internal_has_error();
}
inline const ::Protocol::ErrorObj& S_MOVE::_internal_error() const {
  const ::Protocol::ErrorObj* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ErrorObj&>(
      ::Protocol::_ErrorObj_default_instance_);
}
inline const ::Protocol::ErrorObj& S_MOVE::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE.error)
  return _internal_error();
}
inline void S_MOVE::unsafe_arena_set_allocated_error(
    ::Protocol::ErrorObj* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_MOVE.error)
}
inline ::Protocol::ErrorObj* S_MOVE::release_error() {
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ErrorObj* S_MOVE::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:Protocol.S_MOVE.error)
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::Protocol::ErrorObj* S_MOVE::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ErrorObj>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::Protocol::ErrorObj* S_MOVE::mutable_error() {
  ::Protocol::ErrorObj* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Protocol.S_MOVE.error)
  return _msg;
}
inline void S_MOVE::set_allocated_error(::Protocol::ErrorObj* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MOVE.error)
}

// -------------------------------------------------------------------

// C_SHOT

// uint64 playerId = 1;
inline void C_SHOT::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t C_SHOT::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t C_SHOT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SHOT.playerId)
  return _internal_playerid();
}
inline void C_SHOT::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void C_SHOT::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SHOT.playerId)
}

// float spawnPosX = 2;
inline void C_SHOT::clear_spawnposx() {
  _impl_.spawnposx_ = 0;
}
inline float C_SHOT::_internal_spawnposx() const {
  return _impl_.spawnposx_;
}
inline float C_SHOT::spawnposx() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SHOT.spawnPosX)
  return _internal_spawnposx();
}
inline void C_SHOT::_internal_set_spawnposx(float value) {
  
  _impl_.spawnposx_ = value;
}
inline void C_SHOT::set_spawnposx(float value) {
  _internal_set_spawnposx(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SHOT.spawnPosX)
}

// float spawnPosY = 3;
inline void C_SHOT::clear_spawnposy() {
  _impl_.spawnposy_ = 0;
}
inline float C_SHOT::_internal_spawnposy() const {
  return _impl_.spawnposy_;
}
inline float C_SHOT::spawnposy() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SHOT.spawnPosY)
  return _internal_spawnposy();
}
inline void C_SHOT::_internal_set_spawnposy(float value) {
  
  _impl_.spawnposy_ = value;
}
inline void C_SHOT::set_spawnposy(float value) {
  _internal_set_spawnposy(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SHOT.spawnPosY)
}

// float targetPosX = 4;
inline void C_SHOT::clear_targetposx() {
  _impl_.targetposx_ = 0;
}
inline float C_SHOT::_internal_targetposx() const {
  return _impl_.targetposx_;
}
inline float C_SHOT::targetposx() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SHOT.targetPosX)
  return _internal_targetposx();
}
inline void C_SHOT::_internal_set_targetposx(float value) {
  
  _impl_.targetposx_ = value;
}
inline void C_SHOT::set_targetposx(float value) {
  _internal_set_targetposx(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SHOT.targetPosX)
}

// float targetPosY = 5;
inline void C_SHOT::clear_targetposy() {
  _impl_.targetposy_ = 0;
}
inline float C_SHOT::_internal_targetposy() const {
  return _impl_.targetposy_;
}
inline float C_SHOT::targetposy() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SHOT.targetPosY)
  return _internal_targetposy();
}
inline void C_SHOT::_internal_set_targetposy(float value) {
  
  _impl_.targetposy_ = value;
}
inline void C_SHOT::set_targetposy(float value) {
  _internal_set_targetposy(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SHOT.targetPosY)
}

// -------------------------------------------------------------------

// S_SHOT

// uint64 playerId = 1;
inline void S_SHOT::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t S_SHOT::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t S_SHOT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SHOT.playerId)
  return _internal_playerid();
}
inline void S_SHOT::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_SHOT::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SHOT.playerId)
}

// float spawnPosX = 2;
inline void S_SHOT::clear_spawnposx() {
  _impl_.spawnposx_ = 0;
}
inline float S_SHOT::_internal_spawnposx() const {
  return _impl_.spawnposx_;
}
inline float S_SHOT::spawnposx() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SHOT.spawnPosX)
  return _internal_spawnposx();
}
inline void S_SHOT::_internal_set_spawnposx(float value) {
  
  _impl_.spawnposx_ = value;
}
inline void S_SHOT::set_spawnposx(float value) {
  _internal_set_spawnposx(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SHOT.spawnPosX)
}

// float spawnPosY = 3;
inline void S_SHOT::clear_spawnposy() {
  _impl_.spawnposy_ = 0;
}
inline float S_SHOT::_internal_spawnposy() const {
  return _impl_.spawnposy_;
}
inline float S_SHOT::spawnposy() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SHOT.spawnPosY)
  return _internal_spawnposy();
}
inline void S_SHOT::_internal_set_spawnposy(float value) {
  
  _impl_.spawnposy_ = value;
}
inline void S_SHOT::set_spawnposy(float value) {
  _internal_set_spawnposy(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SHOT.spawnPosY)
}

// float targetPosX = 4;
inline void S_SHOT::clear_targetposx() {
  _impl_.targetposx_ = 0;
}
inline float S_SHOT::_internal_targetposx() const {
  return _impl_.targetposx_;
}
inline float S_SHOT::targetposx() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SHOT.targetPosX)
  return _internal_targetposx();
}
inline void S_SHOT::_internal_set_targetposx(float value) {
  
  _impl_.targetposx_ = value;
}
inline void S_SHOT::set_targetposx(float value) {
  _internal_set_targetposx(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SHOT.targetPosX)
}

// float targetPosY = 5;
inline void S_SHOT::clear_targetposy() {
  _impl_.targetposy_ = 0;
}
inline float S_SHOT::_internal_targetposy() const {
  return _impl_.targetposy_;
}
inline float S_SHOT::targetposy() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SHOT.targetPosY)
  return _internal_targetposy();
}
inline void S_SHOT::_internal_set_targetposy(float value) {
  
  _impl_.targetposy_ = value;
}
inline void S_SHOT::set_targetposy(float value) {
  _internal_set_targetposy(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SHOT.targetPosY)
}

// bool success = 6;
inline void S_SHOT::clear_success() {
  _impl_.success_ = false;
}
inline bool S_SHOT::_internal_success() const {
  return _impl_.success_;
}
inline bool S_SHOT::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SHOT.success)
  return _internal_success();
}
inline void S_SHOT::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_SHOT::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SHOT.success)
}

// .Protocol.ErrorObj error = 7;
inline bool S_SHOT::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool S_SHOT::has_error() const {
  return _internal_has_error();
}
inline const ::Protocol::ErrorObj& S_SHOT::_internal_error() const {
  const ::Protocol::ErrorObj* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ErrorObj&>(
      ::Protocol::_ErrorObj_default_instance_);
}
inline const ::Protocol::ErrorObj& S_SHOT::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SHOT.error)
  return _internal_error();
}
inline void S_SHOT::unsafe_arena_set_allocated_error(
    ::Protocol::ErrorObj* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SHOT.error)
}
inline ::Protocol::ErrorObj* S_SHOT::release_error() {
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ErrorObj* S_SHOT::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:Protocol.S_SHOT.error)
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::Protocol::ErrorObj* S_SHOT::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ErrorObj>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::Protocol::ErrorObj* S_SHOT::mutable_error() {
  ::Protocol::ErrorObj* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SHOT.error)
  return _msg;
}
inline void S_SHOT::set_allocated_error(::Protocol::ErrorObj* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SHOT.error)
}

// -------------------------------------------------------------------

// C_HIT

// uint64 playerId = 1;
inline void C_HIT::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t C_HIT::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t C_HIT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_HIT.playerId)
  return _internal_playerid();
}
inline void C_HIT::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void C_HIT::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_HIT.playerId)
}

// uint64 shotPlayerId = 2;
inline void C_HIT::clear_shotplayerid() {
  _impl_.shotplayerid_ = uint64_t{0u};
}
inline uint64_t C_HIT::_internal_shotplayerid() const {
  return _impl_.shotplayerid_;
}
inline uint64_t C_HIT::shotplayerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_HIT.shotPlayerId)
  return _internal_shotplayerid();
}
inline void C_HIT::_internal_set_shotplayerid(uint64_t value) {
  
  _impl_.shotplayerid_ = value;
}
inline void C_HIT::set_shotplayerid(uint64_t value) {
  _internal_set_shotplayerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_HIT.shotPlayerId)
}

// uint64 damage = 3;
inline void C_HIT::clear_damage() {
  _impl_.damage_ = uint64_t{0u};
}
inline uint64_t C_HIT::_internal_damage() const {
  return _impl_.damage_;
}
inline uint64_t C_HIT::damage() const {
  // @@protoc_insertion_point(field_get:Protocol.C_HIT.damage)
  return _internal_damage();
}
inline void C_HIT::_internal_set_damage(uint64_t value) {
  
  _impl_.damage_ = value;
}
inline void C_HIT::set_damage(uint64_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:Protocol.C_HIT.damage)
}

// -------------------------------------------------------------------

// S_HIT

// uint64 playerId = 1;
inline void S_HIT::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t S_HIT::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t S_HIT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_HIT.playerId)
  return _internal_playerid();
}
inline void S_HIT::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_HIT::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_HIT.playerId)
}

// uint64 currentHP = 2;
inline void S_HIT::clear_currenthp() {
  _impl_.currenthp_ = uint64_t{0u};
}
inline uint64_t S_HIT::_internal_currenthp() const {
  return _impl_.currenthp_;
}
inline uint64_t S_HIT::currenthp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_HIT.currentHP)
  return _internal_currenthp();
}
inline void S_HIT::_internal_set_currenthp(uint64_t value) {
  
  _impl_.currenthp_ = value;
}
inline void S_HIT::set_currenthp(uint64_t value) {
  _internal_set_currenthp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_HIT.currentHP)
}

// .Protocol.PlayerState state = 3;
inline void S_HIT::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::PlayerState S_HIT::_internal_state() const {
  return static_cast< ::Protocol::PlayerState >(_impl_.state_);
}
inline ::Protocol::PlayerState S_HIT::state() const {
  // @@protoc_insertion_point(field_get:Protocol.S_HIT.state)
  return _internal_state();
}
inline void S_HIT::_internal_set_state(::Protocol::PlayerState value) {
  
  _impl_.state_ = value;
}
inline void S_HIT::set_state(::Protocol::PlayerState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.S_HIT.state)
}

// bool success = 4;
inline void S_HIT::clear_success() {
  _impl_.success_ = false;
}
inline bool S_HIT::_internal_success() const {
  return _impl_.success_;
}
inline bool S_HIT::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_HIT.success)
  return _internal_success();
}
inline void S_HIT::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_HIT::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_HIT.success)
}

// .Protocol.ErrorObj error = 5;
inline bool S_HIT::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool S_HIT::has_error() const {
  return _internal_has_error();
}
inline const ::Protocol::ErrorObj& S_HIT::_internal_error() const {
  const ::Protocol::ErrorObj* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ErrorObj&>(
      ::Protocol::_ErrorObj_default_instance_);
}
inline const ::Protocol::ErrorObj& S_HIT::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S_HIT.error)
  return _internal_error();
}
inline void S_HIT::unsafe_arena_set_allocated_error(
    ::Protocol::ErrorObj* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_HIT.error)
}
inline ::Protocol::ErrorObj* S_HIT::release_error() {
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ErrorObj* S_HIT::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:Protocol.S_HIT.error)
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::Protocol::ErrorObj* S_HIT::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ErrorObj>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::Protocol::ErrorObj* S_HIT::mutable_error() {
  ::Protocol::ErrorObj* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Protocol.S_HIT.error)
  return _msg;
}
inline void S_HIT::set_allocated_error(::Protocol::ErrorObj* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_HIT.error)
}

// -------------------------------------------------------------------

// C_EAT_ROOM_ITEM

// uint64 playerId = 1;
inline void C_EAT_ROOM_ITEM::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t C_EAT_ROOM_ITEM::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t C_EAT_ROOM_ITEM::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_EAT_ROOM_ITEM.playerId)
  return _internal_playerid();
}
inline void C_EAT_ROOM_ITEM::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void C_EAT_ROOM_ITEM::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_EAT_ROOM_ITEM.playerId)
}

// .Protocol.RoomItem item = 2;
inline bool C_EAT_ROOM_ITEM::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool C_EAT_ROOM_ITEM::has_item() const {
  return _internal_has_item();
}
inline const ::Protocol::RoomItem& C_EAT_ROOM_ITEM::_internal_item() const {
  const ::Protocol::RoomItem* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomItem&>(
      ::Protocol::_RoomItem_default_instance_);
}
inline const ::Protocol::RoomItem& C_EAT_ROOM_ITEM::item() const {
  // @@protoc_insertion_point(field_get:Protocol.C_EAT_ROOM_ITEM.item)
  return _internal_item();
}
inline void C_EAT_ROOM_ITEM::unsafe_arena_set_allocated_item(
    ::Protocol::RoomItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_EAT_ROOM_ITEM.item)
}
inline ::Protocol::RoomItem* C_EAT_ROOM_ITEM::release_item() {
  
  ::Protocol::RoomItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::RoomItem* C_EAT_ROOM_ITEM::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:Protocol.C_EAT_ROOM_ITEM.item)
  
  ::Protocol::RoomItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::Protocol::RoomItem* C_EAT_ROOM_ITEM::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomItem>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::Protocol::RoomItem* C_EAT_ROOM_ITEM::mutable_item() {
  ::Protocol::RoomItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:Protocol.C_EAT_ROOM_ITEM.item)
  return _msg;
}
inline void C_EAT_ROOM_ITEM::set_allocated_item(::Protocol::RoomItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_EAT_ROOM_ITEM.item)
}

// -------------------------------------------------------------------

// S_EAT_ROOM_ITEM

// .Protocol.Player player = 1;
inline bool S_EAT_ROOM_ITEM::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool S_EAT_ROOM_ITEM::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_EAT_ROOM_ITEM::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_EAT_ROOM_ITEM::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EAT_ROOM_ITEM.player)
  return _internal_player();
}
inline void S_EAT_ROOM_ITEM::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_EAT_ROOM_ITEM.player)
}
inline ::Protocol::Player* S_EAT_ROOM_ITEM::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* S_EAT_ROOM_ITEM::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_EAT_ROOM_ITEM.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_EAT_ROOM_ITEM::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* S_EAT_ROOM_ITEM::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_EAT_ROOM_ITEM.player)
  return _msg;
}
inline void S_EAT_ROOM_ITEM::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_EAT_ROOM_ITEM.player)
}

// bool success = 2;
inline void S_EAT_ROOM_ITEM::clear_success() {
  _impl_.success_ = false;
}
inline bool S_EAT_ROOM_ITEM::_internal_success() const {
  return _impl_.success_;
}
inline bool S_EAT_ROOM_ITEM::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EAT_ROOM_ITEM.success)
  return _internal_success();
}
inline void S_EAT_ROOM_ITEM::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_EAT_ROOM_ITEM::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_EAT_ROOM_ITEM.success)
}

// .Protocol.ErrorObj error = 3;
inline bool S_EAT_ROOM_ITEM::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool S_EAT_ROOM_ITEM::has_error() const {
  return _internal_has_error();
}
inline const ::Protocol::ErrorObj& S_EAT_ROOM_ITEM::_internal_error() const {
  const ::Protocol::ErrorObj* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ErrorObj&>(
      ::Protocol::_ErrorObj_default_instance_);
}
inline const ::Protocol::ErrorObj& S_EAT_ROOM_ITEM::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EAT_ROOM_ITEM.error)
  return _internal_error();
}
inline void S_EAT_ROOM_ITEM::unsafe_arena_set_allocated_error(
    ::Protocol::ErrorObj* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_EAT_ROOM_ITEM.error)
}
inline ::Protocol::ErrorObj* S_EAT_ROOM_ITEM::release_error() {
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ErrorObj* S_EAT_ROOM_ITEM::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:Protocol.S_EAT_ROOM_ITEM.error)
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::Protocol::ErrorObj* S_EAT_ROOM_ITEM::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ErrorObj>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::Protocol::ErrorObj* S_EAT_ROOM_ITEM::mutable_error() {
  ::Protocol::ErrorObj* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Protocol.S_EAT_ROOM_ITEM.error)
  return _msg;
}
inline void S_EAT_ROOM_ITEM::set_allocated_error(::Protocol::ErrorObj* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_EAT_ROOM_ITEM.error)
}

// -------------------------------------------------------------------

// C_USE_ITEM

// uint64 playerId = 1;
inline void C_USE_ITEM::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t C_USE_ITEM::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t C_USE_ITEM::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_USE_ITEM.playerId)
  return _internal_playerid();
}
inline void C_USE_ITEM::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void C_USE_ITEM::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_USE_ITEM.playerId)
}

// .Protocol.Item item = 2;
inline bool C_USE_ITEM::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool C_USE_ITEM::has_item() const {
  return _internal_has_item();
}
inline const ::Protocol::Item& C_USE_ITEM::_internal_item() const {
  const ::Protocol::Item* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Item&>(
      ::Protocol::_Item_default_instance_);
}
inline const ::Protocol::Item& C_USE_ITEM::item() const {
  // @@protoc_insertion_point(field_get:Protocol.C_USE_ITEM.item)
  return _internal_item();
}
inline void C_USE_ITEM::unsafe_arena_set_allocated_item(
    ::Protocol::Item* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_USE_ITEM.item)
}
inline ::Protocol::Item* C_USE_ITEM::release_item() {
  
  ::Protocol::Item* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Item* C_USE_ITEM::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:Protocol.C_USE_ITEM.item)
  
  ::Protocol::Item* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::Protocol::Item* C_USE_ITEM::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Item>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::Protocol::Item* C_USE_ITEM::mutable_item() {
  ::Protocol::Item* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:Protocol.C_USE_ITEM.item)
  return _msg;
}
inline void C_USE_ITEM::set_allocated_item(::Protocol::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_USE_ITEM.item)
}

// -------------------------------------------------------------------

// S_USE_ITEM

// .Protocol.Player player = 1;
inline bool S_USE_ITEM::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool S_USE_ITEM::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_USE_ITEM::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_USE_ITEM::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_USE_ITEM.player)
  return _internal_player();
}
inline void S_USE_ITEM::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_USE_ITEM.player)
}
inline ::Protocol::Player* S_USE_ITEM::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* S_USE_ITEM::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_USE_ITEM.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_USE_ITEM::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* S_USE_ITEM::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_USE_ITEM.player)
  return _msg;
}
inline void S_USE_ITEM::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_USE_ITEM.player)
}

// bool success = 2;
inline void S_USE_ITEM::clear_success() {
  _impl_.success_ = false;
}
inline bool S_USE_ITEM::_internal_success() const {
  return _impl_.success_;
}
inline bool S_USE_ITEM::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_USE_ITEM.success)
  return _internal_success();
}
inline void S_USE_ITEM::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_USE_ITEM::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_USE_ITEM.success)
}

// .Protocol.ErrorObj error = 3;
inline bool S_USE_ITEM::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool S_USE_ITEM::has_error() const {
  return _internal_has_error();
}
inline const ::Protocol::ErrorObj& S_USE_ITEM::_internal_error() const {
  const ::Protocol::ErrorObj* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ErrorObj&>(
      ::Protocol::_ErrorObj_default_instance_);
}
inline const ::Protocol::ErrorObj& S_USE_ITEM::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S_USE_ITEM.error)
  return _internal_error();
}
inline void S_USE_ITEM::unsafe_arena_set_allocated_error(
    ::Protocol::ErrorObj* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_USE_ITEM.error)
}
inline ::Protocol::ErrorObj* S_USE_ITEM::release_error() {
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ErrorObj* S_USE_ITEM::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:Protocol.S_USE_ITEM.error)
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::Protocol::ErrorObj* S_USE_ITEM::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ErrorObj>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::Protocol::ErrorObj* S_USE_ITEM::mutable_error() {
  ::Protocol::ErrorObj* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Protocol.S_USE_ITEM.error)
  return _msg;
}
inline void S_USE_ITEM::set_allocated_error(::Protocol::ErrorObj* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_USE_ITEM.error)
}

// -------------------------------------------------------------------

// C_CREATE_PARTY

// uint64 playerId = 1;
inline void C_CREATE_PARTY::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t C_CREATE_PARTY::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t C_CREATE_PARTY::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE_PARTY.playerId)
  return _internal_playerid();
}
inline void C_CREATE_PARTY::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void C_CREATE_PARTY::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE_PARTY.playerId)
}

// uint64 partyId = 2;
inline void C_CREATE_PARTY::clear_partyid() {
  _impl_.partyid_ = uint64_t{0u};
}
inline uint64_t C_CREATE_PARTY::_internal_partyid() const {
  return _impl_.partyid_;
}
inline uint64_t C_CREATE_PARTY::partyid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE_PARTY.partyId)
  return _internal_partyid();
}
inline void C_CREATE_PARTY::_internal_set_partyid(uint64_t value) {
  
  _impl_.partyid_ = value;
}
inline void C_CREATE_PARTY::set_partyid(uint64_t value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE_PARTY.partyId)
}

// -------------------------------------------------------------------

// S_CREATE_PARTY

// bool success = 1;
inline void S_CREATE_PARTY::clear_success() {
  _impl_.success_ = false;
}
inline bool S_CREATE_PARTY::_internal_success() const {
  return _impl_.success_;
}
inline bool S_CREATE_PARTY::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_PARTY.success)
  return _internal_success();
}
inline void S_CREATE_PARTY::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_CREATE_PARTY::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_PARTY.success)
}

// uint64 partyId = 2;
inline void S_CREATE_PARTY::clear_partyid() {
  _impl_.partyid_ = uint64_t{0u};
}
inline uint64_t S_CREATE_PARTY::_internal_partyid() const {
  return _impl_.partyid_;
}
inline uint64_t S_CREATE_PARTY::partyid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_PARTY.partyId)
  return _internal_partyid();
}
inline void S_CREATE_PARTY::_internal_set_partyid(uint64_t value) {
  
  _impl_.partyid_ = value;
}
inline void S_CREATE_PARTY::set_partyid(uint64_t value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_PARTY.partyId)
}

// .Protocol.ErrorObj error = 3;
inline bool S_CREATE_PARTY::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool S_CREATE_PARTY::has_error() const {
  return _internal_has_error();
}
inline const ::Protocol::ErrorObj& S_CREATE_PARTY::_internal_error() const {
  const ::Protocol::ErrorObj* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ErrorObj&>(
      ::Protocol::_ErrorObj_default_instance_);
}
inline const ::Protocol::ErrorObj& S_CREATE_PARTY::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_PARTY.error)
  return _internal_error();
}
inline void S_CREATE_PARTY::unsafe_arena_set_allocated_error(
    ::Protocol::ErrorObj* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_CREATE_PARTY.error)
}
inline ::Protocol::ErrorObj* S_CREATE_PARTY::release_error() {
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ErrorObj* S_CREATE_PARTY::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:Protocol.S_CREATE_PARTY.error)
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::Protocol::ErrorObj* S_CREATE_PARTY::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ErrorObj>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::Protocol::ErrorObj* S_CREATE_PARTY::mutable_error() {
  ::Protocol::ErrorObj* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CREATE_PARTY.error)
  return _msg;
}
inline void S_CREATE_PARTY::set_allocated_error(::Protocol::ErrorObj* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CREATE_PARTY.error)
}

// -------------------------------------------------------------------

// C_JOIN_PARTY

// uint64 playerId = 1;
inline void C_JOIN_PARTY::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t C_JOIN_PARTY::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t C_JOIN_PARTY::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_JOIN_PARTY.playerId)
  return _internal_playerid();
}
inline void C_JOIN_PARTY::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void C_JOIN_PARTY::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_JOIN_PARTY.playerId)
}

// uint64 partyId = 2;
inline void C_JOIN_PARTY::clear_partyid() {
  _impl_.partyid_ = uint64_t{0u};
}
inline uint64_t C_JOIN_PARTY::_internal_partyid() const {
  return _impl_.partyid_;
}
inline uint64_t C_JOIN_PARTY::partyid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_JOIN_PARTY.partyId)
  return _internal_partyid();
}
inline void C_JOIN_PARTY::_internal_set_partyid(uint64_t value) {
  
  _impl_.partyid_ = value;
}
inline void C_JOIN_PARTY::set_partyid(uint64_t value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_JOIN_PARTY.partyId)
}

// -------------------------------------------------------------------

// S_JOIN_PARTY

// bool success = 1;
inline void S_JOIN_PARTY::clear_success() {
  _impl_.success_ = false;
}
inline bool S_JOIN_PARTY::_internal_success() const {
  return _impl_.success_;
}
inline bool S_JOIN_PARTY::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_JOIN_PARTY.success)
  return _internal_success();
}
inline void S_JOIN_PARTY::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_JOIN_PARTY::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_JOIN_PARTY.success)
}

// .Protocol.ErrorObj error = 2;
inline bool S_JOIN_PARTY::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool S_JOIN_PARTY::has_error() const {
  return _internal_has_error();
}
inline const ::Protocol::ErrorObj& S_JOIN_PARTY::_internal_error() const {
  const ::Protocol::ErrorObj* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ErrorObj&>(
      ::Protocol::_ErrorObj_default_instance_);
}
inline const ::Protocol::ErrorObj& S_JOIN_PARTY::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S_JOIN_PARTY.error)
  return _internal_error();
}
inline void S_JOIN_PARTY::unsafe_arena_set_allocated_error(
    ::Protocol::ErrorObj* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_JOIN_PARTY.error)
}
inline ::Protocol::ErrorObj* S_JOIN_PARTY::release_error() {
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ErrorObj* S_JOIN_PARTY::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:Protocol.S_JOIN_PARTY.error)
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::Protocol::ErrorObj* S_JOIN_PARTY::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ErrorObj>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::Protocol::ErrorObj* S_JOIN_PARTY::mutable_error() {
  ::Protocol::ErrorObj* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Protocol.S_JOIN_PARTY.error)
  return _msg;
}
inline void S_JOIN_PARTY::set_allocated_error(::Protocol::ErrorObj* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_JOIN_PARTY.error)
}

// uint64 partyId = 3;
inline void S_JOIN_PARTY::clear_partyid() {
  _impl_.partyid_ = uint64_t{0u};
}
inline uint64_t S_JOIN_PARTY::_internal_partyid() const {
  return _impl_.partyid_;
}
inline uint64_t S_JOIN_PARTY::partyid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_JOIN_PARTY.partyId)
  return _internal_partyid();
}
inline void S_JOIN_PARTY::_internal_set_partyid(uint64_t value) {
  
  _impl_.partyid_ = value;
}
inline void S_JOIN_PARTY::set_partyid(uint64_t value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_JOIN_PARTY.partyId)
}

// .Protocol.Player players = 4;
inline bool S_JOIN_PARTY::_internal_has_players() const {
  return this != internal_default_instance() && _impl_.players_ != nullptr;
}
inline bool S_JOIN_PARTY::has_players() const {
  return _internal_has_players();
}
inline const ::Protocol::Player& S_JOIN_PARTY::_internal_players() const {
  const ::Protocol::Player* p = _impl_.players_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_JOIN_PARTY::players() const {
  // @@protoc_insertion_point(field_get:Protocol.S_JOIN_PARTY.players)
  return _internal_players();
}
inline void S_JOIN_PARTY::unsafe_arena_set_allocated_players(
    ::Protocol::Player* players) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.players_);
  }
  _impl_.players_ = players;
  if (players) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_JOIN_PARTY.players)
}
inline ::Protocol::Player* S_JOIN_PARTY::release_players() {
  
  ::Protocol::Player* temp = _impl_.players_;
  _impl_.players_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* S_JOIN_PARTY::unsafe_arena_release_players() {
  // @@protoc_insertion_point(field_release:Protocol.S_JOIN_PARTY.players)
  
  ::Protocol::Player* temp = _impl_.players_;
  _impl_.players_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_JOIN_PARTY::_internal_mutable_players() {
  
  if (_impl_.players_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.players_ = p;
  }
  return _impl_.players_;
}
inline ::Protocol::Player* S_JOIN_PARTY::mutable_players() {
  ::Protocol::Player* _msg = _internal_mutable_players();
  // @@protoc_insertion_point(field_mutable:Protocol.S_JOIN_PARTY.players)
  return _msg;
}
inline void S_JOIN_PARTY::set_allocated_players(::Protocol::Player* players) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.players_);
  }
  if (players) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(players));
    if (message_arena != submessage_arena) {
      players = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, players, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.players_ = players;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_JOIN_PARTY.players)
}

// -------------------------------------------------------------------

// C_WITHDRAW_PARTY

// uint64 playerId = 1;
inline void C_WITHDRAW_PARTY::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t C_WITHDRAW_PARTY::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t C_WITHDRAW_PARTY::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_WITHDRAW_PARTY.playerId)
  return _internal_playerid();
}
inline void C_WITHDRAW_PARTY::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void C_WITHDRAW_PARTY::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_WITHDRAW_PARTY.playerId)
}

// uint64 partyId = 2;
inline void C_WITHDRAW_PARTY::clear_partyid() {
  _impl_.partyid_ = uint64_t{0u};
}
inline uint64_t C_WITHDRAW_PARTY::_internal_partyid() const {
  return _impl_.partyid_;
}
inline uint64_t C_WITHDRAW_PARTY::partyid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_WITHDRAW_PARTY.partyId)
  return _internal_partyid();
}
inline void C_WITHDRAW_PARTY::_internal_set_partyid(uint64_t value) {
  
  _impl_.partyid_ = value;
}
inline void C_WITHDRAW_PARTY::set_partyid(uint64_t value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_WITHDRAW_PARTY.partyId)
}

// -------------------------------------------------------------------

// S_WITHDRAW_PARTY

// bool success = 1;
inline void S_WITHDRAW_PARTY::clear_success() {
  _impl_.success_ = false;
}
inline bool S_WITHDRAW_PARTY::_internal_success() const {
  return _impl_.success_;
}
inline bool S_WITHDRAW_PARTY::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_WITHDRAW_PARTY.success)
  return _internal_success();
}
inline void S_WITHDRAW_PARTY::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_WITHDRAW_PARTY::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_WITHDRAW_PARTY.success)
}

// .Protocol.ErrorObj error = 2;
inline bool S_WITHDRAW_PARTY::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool S_WITHDRAW_PARTY::has_error() const {
  return _internal_has_error();
}
inline const ::Protocol::ErrorObj& S_WITHDRAW_PARTY::_internal_error() const {
  const ::Protocol::ErrorObj* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ErrorObj&>(
      ::Protocol::_ErrorObj_default_instance_);
}
inline const ::Protocol::ErrorObj& S_WITHDRAW_PARTY::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S_WITHDRAW_PARTY.error)
  return _internal_error();
}
inline void S_WITHDRAW_PARTY::unsafe_arena_set_allocated_error(
    ::Protocol::ErrorObj* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_WITHDRAW_PARTY.error)
}
inline ::Protocol::ErrorObj* S_WITHDRAW_PARTY::release_error() {
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ErrorObj* S_WITHDRAW_PARTY::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:Protocol.S_WITHDRAW_PARTY.error)
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::Protocol::ErrorObj* S_WITHDRAW_PARTY::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ErrorObj>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::Protocol::ErrorObj* S_WITHDRAW_PARTY::mutable_error() {
  ::Protocol::ErrorObj* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Protocol.S_WITHDRAW_PARTY.error)
  return _msg;
}
inline void S_WITHDRAW_PARTY::set_allocated_error(::Protocol::ErrorObj* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_WITHDRAW_PARTY.error)
}

// uint64 partyId = 3;
inline void S_WITHDRAW_PARTY::clear_partyid() {
  _impl_.partyid_ = uint64_t{0u};
}
inline uint64_t S_WITHDRAW_PARTY::_internal_partyid() const {
  return _impl_.partyid_;
}
inline uint64_t S_WITHDRAW_PARTY::partyid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_WITHDRAW_PARTY.partyId)
  return _internal_partyid();
}
inline void S_WITHDRAW_PARTY::_internal_set_partyid(uint64_t value) {
  
  _impl_.partyid_ = value;
}
inline void S_WITHDRAW_PARTY::set_partyid(uint64_t value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_WITHDRAW_PARTY.partyId)
}

// repeated .Protocol.Player players = 4;
inline int S_WITHDRAW_PARTY::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int S_WITHDRAW_PARTY::players_size() const {
  return _internal_players_size();
}
inline ::Protocol::Player* S_WITHDRAW_PARTY::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_WITHDRAW_PARTY.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >*
S_WITHDRAW_PARTY::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_WITHDRAW_PARTY.players)
  return &_impl_.players_;
}
inline const ::Protocol::Player& S_WITHDRAW_PARTY::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::Protocol::Player& S_WITHDRAW_PARTY::players(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_WITHDRAW_PARTY.players)
  return _internal_players(index);
}
inline ::Protocol::Player* S_WITHDRAW_PARTY::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::Protocol::Player* S_WITHDRAW_PARTY::add_players() {
  ::Protocol::Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:Protocol.S_WITHDRAW_PARTY.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >&
S_WITHDRAW_PARTY::players() const {
  // @@protoc_insertion_point(field_list:Protocol.S_WITHDRAW_PARTY.players)
  return _impl_.players_;
}

// uint64 withdrawPlayerId = 5;
inline void S_WITHDRAW_PARTY::clear_withdrawplayerid() {
  _impl_.withdrawplayerid_ = uint64_t{0u};
}
inline uint64_t S_WITHDRAW_PARTY::_internal_withdrawplayerid() const {
  return _impl_.withdrawplayerid_;
}
inline uint64_t S_WITHDRAW_PARTY::withdrawplayerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_WITHDRAW_PARTY.withdrawPlayerId)
  return _internal_withdrawplayerid();
}
inline void S_WITHDRAW_PARTY::_internal_set_withdrawplayerid(uint64_t value) {
  
  _impl_.withdrawplayerid_ = value;
}
inline void S_WITHDRAW_PARTY::set_withdrawplayerid(uint64_t value) {
  _internal_set_withdrawplayerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_WITHDRAW_PARTY.withdrawPlayerId)
}

// -------------------------------------------------------------------

// C_MY_PARTY

// uint64 playerId = 1;
inline void C_MY_PARTY::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t C_MY_PARTY::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t C_MY_PARTY::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MY_PARTY.playerId)
  return _internal_playerid();
}
inline void C_MY_PARTY::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void C_MY_PARTY::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MY_PARTY.playerId)
}

// -------------------------------------------------------------------

// S_MY_PARTY

// bool success = 1;
inline void S_MY_PARTY::clear_success() {
  _impl_.success_ = false;
}
inline bool S_MY_PARTY::_internal_success() const {
  return _impl_.success_;
}
inline bool S_MY_PARTY::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MY_PARTY.success)
  return _internal_success();
}
inline void S_MY_PARTY::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_MY_PARTY::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MY_PARTY.success)
}

// .Protocol.ErrorObj error = 2;
inline bool S_MY_PARTY::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool S_MY_PARTY::has_error() const {
  return _internal_has_error();
}
inline const ::Protocol::ErrorObj& S_MY_PARTY::_internal_error() const {
  const ::Protocol::ErrorObj* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ErrorObj&>(
      ::Protocol::_ErrorObj_default_instance_);
}
inline const ::Protocol::ErrorObj& S_MY_PARTY::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MY_PARTY.error)
  return _internal_error();
}
inline void S_MY_PARTY::unsafe_arena_set_allocated_error(
    ::Protocol::ErrorObj* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_MY_PARTY.error)
}
inline ::Protocol::ErrorObj* S_MY_PARTY::release_error() {
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ErrorObj* S_MY_PARTY::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:Protocol.S_MY_PARTY.error)
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::Protocol::ErrorObj* S_MY_PARTY::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ErrorObj>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::Protocol::ErrorObj* S_MY_PARTY::mutable_error() {
  ::Protocol::ErrorObj* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Protocol.S_MY_PARTY.error)
  return _msg;
}
inline void S_MY_PARTY::set_allocated_error(::Protocol::ErrorObj* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MY_PARTY.error)
}

// uint64 partyId = 3;
inline void S_MY_PARTY::clear_partyid() {
  _impl_.partyid_ = uint64_t{0u};
}
inline uint64_t S_MY_PARTY::_internal_partyid() const {
  return _impl_.partyid_;
}
inline uint64_t S_MY_PARTY::partyid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MY_PARTY.partyId)
  return _internal_partyid();
}
inline void S_MY_PARTY::_internal_set_partyid(uint64_t value) {
  
  _impl_.partyid_ = value;
}
inline void S_MY_PARTY::set_partyid(uint64_t value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MY_PARTY.partyId)
}

// repeated .Protocol.Player players = 4;
inline int S_MY_PARTY::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int S_MY_PARTY::players_size() const {
  return _internal_players_size();
}
inline ::Protocol::Player* S_MY_PARTY::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_MY_PARTY.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >*
S_MY_PARTY::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_MY_PARTY.players)
  return &_impl_.players_;
}
inline const ::Protocol::Player& S_MY_PARTY::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::Protocol::Player& S_MY_PARTY::players(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_MY_PARTY.players)
  return _internal_players(index);
}
inline ::Protocol::Player* S_MY_PARTY::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::Protocol::Player* S_MY_PARTY::add_players() {
  ::Protocol::Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:Protocol.S_MY_PARTY.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >&
S_MY_PARTY::players() const {
  // @@protoc_insertion_point(field_list:Protocol.S_MY_PARTY.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// C_ALL_PARTY

// uint64 playerId = 1;
inline void C_ALL_PARTY::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t C_ALL_PARTY::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t C_ALL_PARTY::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ALL_PARTY.playerId)
  return _internal_playerid();
}
inline void C_ALL_PARTY::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void C_ALL_PARTY::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ALL_PARTY.playerId)
}

// -------------------------------------------------------------------

// S_ALL_PARTY

// bool success = 1;
inline void S_ALL_PARTY::clear_success() {
  _impl_.success_ = false;
}
inline bool S_ALL_PARTY::_internal_success() const {
  return _impl_.success_;
}
inline bool S_ALL_PARTY::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ALL_PARTY.success)
  return _internal_success();
}
inline void S_ALL_PARTY::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_ALL_PARTY::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ALL_PARTY.success)
}

// .Protocol.ErrorObj error = 2;
inline bool S_ALL_PARTY::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool S_ALL_PARTY::has_error() const {
  return _internal_has_error();
}
inline const ::Protocol::ErrorObj& S_ALL_PARTY::_internal_error() const {
  const ::Protocol::ErrorObj* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ErrorObj&>(
      ::Protocol::_ErrorObj_default_instance_);
}
inline const ::Protocol::ErrorObj& S_ALL_PARTY::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ALL_PARTY.error)
  return _internal_error();
}
inline void S_ALL_PARTY::unsafe_arena_set_allocated_error(
    ::Protocol::ErrorObj* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ALL_PARTY.error)
}
inline ::Protocol::ErrorObj* S_ALL_PARTY::release_error() {
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ErrorObj* S_ALL_PARTY::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:Protocol.S_ALL_PARTY.error)
  
  ::Protocol::ErrorObj* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::Protocol::ErrorObj* S_ALL_PARTY::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ErrorObj>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::Protocol::ErrorObj* S_ALL_PARTY::mutable_error() {
  ::Protocol::ErrorObj* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ALL_PARTY.error)
  return _msg;
}
inline void S_ALL_PARTY::set_allocated_error(::Protocol::ErrorObj* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ALL_PARTY.error)
}

// repeated .Protocol.Party parties = 3;
inline int S_ALL_PARTY::_internal_parties_size() const {
  return _impl_.parties_.size();
}
inline int S_ALL_PARTY::parties_size() const {
  return _internal_parties_size();
}
inline ::Protocol::Party* S_ALL_PARTY::mutable_parties(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ALL_PARTY.parties)
  return _impl_.parties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Party >*
S_ALL_PARTY::mutable_parties() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_ALL_PARTY.parties)
  return &_impl_.parties_;
}
inline const ::Protocol::Party& S_ALL_PARTY::_internal_parties(int index) const {
  return _impl_.parties_.Get(index);
}
inline const ::Protocol::Party& S_ALL_PARTY::parties(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_ALL_PARTY.parties)
  return _internal_parties(index);
}
inline ::Protocol::Party* S_ALL_PARTY::_internal_add_parties() {
  return _impl_.parties_.Add();
}
inline ::Protocol::Party* S_ALL_PARTY::add_parties() {
  ::Protocol::Party* _add = _internal_add_parties();
  // @@protoc_insertion_point(field_add:Protocol.S_ALL_PARTY.parties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Party >&
S_ALL_PARTY::parties() const {
  // @@protoc_insertion_point(field_list:Protocol.S_ALL_PARTY.parties)
  return _impl_.parties_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
